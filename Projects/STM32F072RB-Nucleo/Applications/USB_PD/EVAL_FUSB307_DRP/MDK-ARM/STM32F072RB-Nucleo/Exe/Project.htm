<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [STM32F072RB-Nucleo\Exe\Project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image STM32F072RB-Nucleo\Exe\Project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Thu Feb 20 17:08:41 2020
<BR><P>
<H3>Maximum Stack Usage =        560 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
TaskGUI &rArr; GUI_RXProcess &rArr; GUI_SendAnswer &rArr; Request_MessageReq &rArr; USBPD_DPM_RequestMessageRequest &rArr; DPM_SNK_BuildRDOfromSelectedPDO &rArr; USBPD_TRACE_Add &rArr; USBPD_DPM_TraceWakeUp &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2a]">ADC1_COMP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a]">ADC1_COMP_IRQHandler</a><BR>
 <LI><a href="#[1a]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">HardFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2a]">ADC1_COMP_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[4b]">BSP_GetHWBoardVersionName</a> from usbpd_tcpci.o(i.BSP_GetHWBoardVersionName) referenced from main.o(i.main)
 <LI><a href="#[4a]">BSP_GetPDTypeName</a> from usbpd_tcpci.o(i.BSP_GetPDTypeName) referenced from main.o(i.main)
 <LI><a href="#[3c]">CEC_CAN_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[27]">DMA1_Channel1_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[28]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[29]">DMA1_Channel4_5_6_7_IRQHandler</a> from stm32f0xx_it.o(i.DMA1_Channel4_5_6_7_IRQHandler) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[23]">EXTI0_1_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[24]">EXTI2_3_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[25]">EXTI4_15_IRQHandler</a> from stm32f0xx_it.o(i.EXTI4_15_IRQHandler) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[21]">FLASH_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[44]">GUI_CALLBACK_RX</a> from gui_api.o(i.GUI_CALLBACK_RX) referenced from gui_api.o(i.TaskGUI)
 <LI><a href="#[43]">GUI_FormatAndSendNotification</a> from gui_api.o(i.GUI_FormatAndSendNotification) referenced from gui_api.o(i.GUI_Init)
 <LI><a href="#[42]">GUI_PostNotificationMessage</a> from gui_api.o(i.GUI_PostNotificationMessage) referenced from gui_api.o(i.GUI_Init)
 <LI><a href="#[41]">GUI_SaveInfo</a> from gui_api.o(i.GUI_SaveInfo) referenced from gui_api.o(i.GUI_Init)
 <LI><a href="#[48]">HW_IF_PWR_GetCurrent</a> from usbpd_tcpci.o(i.HW_IF_PWR_GetCurrent) referenced from main.o(i.main)
 <LI><a href="#[49]">HW_IF_PWR_GetVoltage</a> from usbpd_tcpci.o(i.HW_IF_PWR_GetVoltage) referenced from main.o(i.main)
 <LI><a href="#[1a]">HardFault_Handler</a> from stm32f0xx_it.o(i.HardFault_Handler) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[35]">I2C1_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[36]">I2C2_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[19]">NMI_Handler</a> from stm32f0xx_it.o(i.NMI_Handler) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[17]">PE_Trace_Empty</a> from usbpd_pe.o(i.PE_Trace_Empty) referenced 2 times from usbpd_pe.o(.data)
 <LI><a href="#[17]">PE_Trace_Empty</a> from usbpd_pe.o(i.PE_Trace_Empty) referenced from usbpd_pe.o(i.USBPD_PE_SetTrace)
 <LI><a href="#[6d]">PRL_BistCompleted</a> from usbpd_prl.o(i.PRL_BistCompleted) referenced from usbpd_prl.o(.constdata)
 <LI><a href="#[6a]">PRL_Received</a> from usbpd_prl.o(i.PRL_Received) referenced from usbpd_prl.o(.constdata)
 <LI><a href="#[6c]">PRL_ResetCompleted</a> from usbpd_prl.o(i.PRL_ResetCompleted) referenced from usbpd_prl.o(.constdata)
 <LI><a href="#[6b]">PRL_ResetIndicate</a> from usbpd_prl.o(i.PRL_ResetIndicate) referenced from usbpd_prl.o(.constdata)
 <LI><a href="#[6e]">PRL_TxCompleted</a> from usbpd_prl.o(i.PRL_TxCompleted) referenced from usbpd_prl.o(.constdata)
 <LI><a href="#[1f]">PVD_VDDIO2_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[1c]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[22]">RCC_CRS_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[20]">RTC_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[18]">Reset_Handler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[37]">SPI1_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[38]">SPI2_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[1b]">SVC_Handler</a> from port.o(i.SVC_Handler) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[1d]">SysTick_Handler</a> from stm32f0xx_it.o(i.SysTick_Handler) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[3f]">SystemInit</a> from system_stm32f0xx.o(i.SystemInit) referenced from startup_stm32f072xb.o(.text)
 <LI><a href="#[45]">TCPM_PortIsDoingSwap</a> from usbpd_tcpm.o(i.TCPM_PortIsDoingSwap) referenced from usbpd_tcpm.o(i.USBPD_TCPM_HWInit)
 <LI><a href="#[31]">TIM14_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[32]">TIM15_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[33]">TIM16_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[34]">TIM17_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[2b]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[2c]">TIM1_CC_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[2d]">TIM2_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[2e]">TIM3_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[2f]">TIM6_DAC_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[30]">TIM7_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[26]">TSC_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[69]">TaskGUI</a> from gui_api.o(i.TaskGUI) referenced from gui_api.o(.constdata)
 <LI><a href="#[39]">USART1_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[3a]">USART2_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[3b]">USART3_4_IRQHandler</a> from stm32f0xx_it.o(i.USART3_4_IRQHandler) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[50]">USBPD_ALERT_Task</a> from usbpd_dpm_core.o(i.USBPD_ALERT_Task) referenced from usbpd_dpm_core.o(.constdata)
 <LI><a href="#[4e]">USBPD_DPM_CADCallback</a> from usbpd_dpm_core.o(i.USBPD_DPM_CADCallback) referenced from usbpd_dpm_core.o(.constdata)
 <LI><a href="#[5f]">USBPD_DPM_EvaluateDataRoleSwap</a> from usbpd_dpm_user.o(i.USBPD_DPM_EvaluateDataRoleSwap) referenced from usbpd_dpm_core.o(.constdata)
 <LI><a href="#[54]">USBPD_DPM_EvaluatePowerRoleSwap</a> from usbpd_dpm_user.o(i.USBPD_DPM_EvaluatePowerRoleSwap) referenced from usbpd_dpm_core.o(.constdata)
 <LI><a href="#[59]">USBPD_DPM_EvaluateRequest</a> from usbpd_dpm_user.o(i.USBPD_DPM_EvaluateRequest) referenced from usbpd_dpm_core.o(.constdata)
 <LI><a href="#[5d]">USBPD_DPM_EvaluateVconnSwap</a> from usbpd_dpm_user.o(i.USBPD_DPM_EvaluateVconnSwap) referenced from usbpd_dpm_core.o(.constdata)
 <LI><a href="#[56]">USBPD_DPM_ExtendedMessageReceived</a> from usbpd_dpm_user.o(i.USBPD_DPM_ExtendedMessageReceived) referenced from usbpd_dpm_core.o(.constdata)
 <LI><a href="#[57]">USBPD_DPM_GetDataInfo</a> from usbpd_dpm_user.o(i.USBPD_DPM_GetDataInfo) referenced from usbpd_dpm_core.o(.constdata)
 <LI><a href="#[53]">USBPD_DPM_HardReset</a> from usbpd_dpm_user.o(i.USBPD_DPM_HardReset) referenced from usbpd_dpm_core.o(.constdata)
 <LI><a href="#[60]">USBPD_DPM_IsPowerReady</a> from usbpd_dpm_user.o(i.USBPD_DPM_IsPowerReady) referenced from usbpd_dpm_core.o(.constdata)
 <LI><a href="#[55]">USBPD_DPM_Notification</a> from usbpd_dpm_user.o(i.USBPD_DPM_Notification) referenced from usbpd_dpm_core.o(.constdata)
 <LI><a href="#[5e]">USBPD_DPM_PE_VconnPwr</a> from usbpd_dpm_user.o(i.USBPD_DPM_PE_VconnPwr) referenced from usbpd_dpm_core.o(.constdata)
 <LI><a href="#[5b]">USBPD_DPM_PowerRoleSwap</a> from usbpd_dpm_user.o(i.USBPD_DPM_PowerRoleSwap) referenced from usbpd_dpm_core.o(.constdata)
 <LI><a href="#[5a]">USBPD_DPM_SNK_EvaluateCapabilities</a> from usbpd_dpm_user.o(i.USBPD_DPM_SNK_EvaluateCapabilities) referenced from usbpd_dpm_core.o(.constdata)
 <LI><a href="#[58]">USBPD_DPM_SetDataInfo</a> from usbpd_dpm_user.o(i.USBPD_DPM_SetDataInfo) referenced from usbpd_dpm_core.o(.constdata)
 <LI><a href="#[52]">USBPD_DPM_SetupNewPower</a> from usbpd_dpm_user.o(i.USBPD_DPM_SetupNewPower) referenced from usbpd_dpm_core.o(.constdata)
 <LI><a href="#[61]">USBPD_DPM_UserExecute</a> from usbpd_dpm_user.o(i.USBPD_DPM_UserExecute) referenced from usbpd_dpm_user.o(.constdata)
 <LI><a href="#[4f]">USBPD_PE_Task</a> from usbpd_dpm_core.o(i.USBPD_PE_Task) referenced 2 times from usbpd_dpm_core.o(.constdata)
 <LI><a href="#[5c]">USBPD_PE_TaskWakeUp</a> from usbpd_dpm_core.o(i.USBPD_PE_TaskWakeUp) referenced from usbpd_dpm_core.o(.constdata)
 <LI><a href="#[46]">USBPD_TRACE_Add</a> from usbpd_trace.o(i.USBPD_TRACE_Add) referenced from usbpd_trace.o(i.USBPD_TRACE_Init)
 <LI><a href="#[51]">USBPD_TRACE_TX_Task</a> from usbpd_dpm_core.o(i.USBPD_TRACE_TX_Task) referenced from usbpd_dpm_core.o(.constdata)
 <LI><a href="#[62]">USBPD_VDM_InformIdentity</a> from usbpd_vdm_user.o(i.USBPD_VDM_InformIdentity) referenced from usbpd_vdm_user.o(.constdata)
 <LI><a href="#[64]">USBPD_VDM_InformMode</a> from usbpd_vdm_user.o(i.USBPD_VDM_InformMode) referenced from usbpd_vdm_user.o(.constdata)
 <LI><a href="#[65]">USBPD_VDM_InformModeEnter</a> from usbpd_vdm_user.o(i.USBPD_VDM_InformModeEnter) referenced from usbpd_vdm_user.o(.constdata)
 <LI><a href="#[66]">USBPD_VDM_InformModeExit</a> from usbpd_vdm_user.o(i.USBPD_VDM_InformModeExit) referenced from usbpd_vdm_user.o(.constdata)
 <LI><a href="#[63]">USBPD_VDM_InformSVID</a> from usbpd_vdm_user.o(i.USBPD_VDM_InformSVID) referenced from usbpd_vdm_user.o(.constdata)
 <LI><a href="#[68]">USBPD_VDM_InformSpecific</a> from usbpd_vdm_user.o(i.USBPD_VDM_InformSpecific) referenced from usbpd_vdm_user.o(.constdata)
 <LI><a href="#[67]">USBPD_VDM_SendSpecific</a> from usbpd_vdm_user.o(i.USBPD_VDM_SendSpecific) referenced from usbpd_vdm_user.o(.constdata)
 <LI><a href="#[3d]">USB_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[1e]">WWDG_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[40]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f072xb.o(.text)
 <LI><a href="#[47]">_sputc</a> from printf8.o(i._sputc) referenced from printf8.o(i.__0sprintf$8)
 <LI><a href="#[16]">fusb305_tcpc_DisableRx</a> from fusb305.o(i.fusb305_tcpc_DisableRx) referenced 2 times from fusb305.o(.data)
 <LI><a href="#[15]">fusb305_tcpc_EnableRx</a> from fusb305.o(i.fusb305_tcpc_EnableRx) referenced 2 times from fusb305.o(.data)
 <LI><a href="#[14]">fusb305_tcpc_IfSinkTxOk</a> from fusb305.o(i.fusb305_tcpc_IfSinkTxOk) referenced 2 times from fusb305.o(.data)
 <LI><a href="#[12]">fusb305_tcpc_SinkTxNG</a> from fusb305.o(i.fusb305_tcpc_SinkTxNG) referenced 2 times from fusb305.o(.data)
 <LI><a href="#[13]">fusb305_tcpc_SinkTxOK</a> from fusb305.o(i.fusb305_tcpc_SinkTxOK) referenced 2 times from fusb305.o(.data)
 <LI><a href="#[e]">fusb305_tcpc_alert</a> from fusb305.o(i.fusb305_tcpc_alert) referenced 2 times from fusb305.o(.data)
 <LI><a href="#[f]">fusb305_tcpc_clear_alert</a> from fusb305.o(i.fusb305_tcpc_clear_alert) referenced 2 times from fusb305.o(.data)
 <LI><a href="#[1]">fusb305_tcpc_get_cc</a> from fusb305.o(i.fusb305_tcpc_get_cc) referenced 2 times from fusb305.o(.data)
 <LI><a href="#[3]">fusb305_tcpc_get_fault_status</a> from fusb305.o(i.fusb305_tcpc_get_fault_status) referenced 2 times from fusb305.o(.data)
 <LI><a href="#[d]">fusb305_tcpc_get_message</a> from fusb305.o(i.fusb305_tcpc_get_message) referenced 2 times from fusb305.o(.data)
 <LI><a href="#[2]">fusb305_tcpc_get_power_status</a> from fusb305.o(i.fusb305_tcpc_get_power_status) referenced 2 times from fusb305.o(.data)
 <LI><a href="#[5]">fusb305_tcpc_get_vbus_level</a> from fusb305.o(i.fusb305_tcpc_get_vbus_level) referenced 2 times from fusb305.o(.data)
 <LI><a href="#[0]">fusb305_tcpc_init</a> from fusb305.o(i.fusb305_tcpc_init) referenced 2 times from fusb305.o(.data)
 <LI><a href="#[11]">fusb305_tcpc_set_bist_test_data</a> from fusb305.o(i.fusb305_tcpc_set_bist_test_data) referenced 2 times from fusb305.o(.data)
 <LI><a href="#[7]">fusb305_tcpc_set_cc</a> from fusb305.o(i.fusb305_tcpc_set_cc) referenced 2 times from fusb305.o(.data)
 <LI><a href="#[4]">fusb305_tcpc_set_fault_status</a> from fusb305.o(i.fusb305_tcpc_set_fault_status) referenced 2 times from fusb305.o(.data)
 <LI><a href="#[a]">fusb305_tcpc_set_msg_header</a> from fusb305.o(i.fusb305_tcpc_set_msg_header) referenced 2 times from fusb305.o(.data)
 <LI><a href="#[8]">fusb305_tcpc_set_polarity</a> from fusb305.o(i.fusb305_tcpc_set_polarity) referenced 2 times from fusb305.o(.data)
 <LI><a href="#[b]">fusb305_tcpc_set_rx_state</a> from fusb305.o(i.fusb305_tcpc_set_rx_state) referenced 2 times from fusb305.o(.data)
 <LI><a href="#[c]">fusb305_tcpc_set_sop_supported</a> from fusb305.o(i.fusb305_tcpc_set_sop_supported) referenced 2 times from fusb305.o(.data)
 <LI><a href="#[6]">fusb305_tcpc_set_vbus_level</a> from fusb305.o(i.fusb305_tcpc_set_vbus_level) referenced 2 times from fusb305.o(.data)
 <LI><a href="#[9]">fusb305_tcpc_set_vconn</a> from fusb305.o(i.fusb305_tcpc_set_vconn) referenced 2 times from fusb305.o(.data)
 <LI><a href="#[10]">fusb305_tcpc_transmit</a> from fusb305.o(i.fusb305_tcpc_transmit) referenced 2 times from fusb305.o(.data)
 <LI><a href="#[3e]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[4d]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[4c]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[40]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(.text)
</UL>
<P><STRONG><a name="[1e5]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[6f]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[7a]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1e6]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1e7]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1e8]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1e9]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1ea]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[1de]"></a>__asm___6_port_c_39a90d8d__prvPortStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[1df]"></a>ulSetInterruptMaskFromISR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[1e1]"></a>vClearInterruptMaskFromISR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[1c]"></a>PendSV_Handler</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>ADC1_COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>CEC_CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>PVD_VDDIO2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>RCC_CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[1eb]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_SNK_EvaluateCapabilities
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init1msTick
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_StateMachine_SRC
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_StateMachine_SNK
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PostNotificationMessage
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DpmConfigSetCnf
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_RequestMessageRequest
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DPM_SNK_BuildRDOfromSelectedPDO
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DPM_FindVoltageIndex
</UL>

<P><STRONG><a name="[1ec]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateSNKPowerPort0
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DpmConfigSetCnf
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PWR_IF_CheckUpdateSNKPower
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_SNK_EvaluateMatchWithSRCPDO
</UL>

<P><STRONG><a name="[78]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1ed]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_SetDataInfo
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_GetDataInfo
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_StateMachine_SRC
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SaveInfo
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DpmConfigSetCnf
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_VDM_InformIdentity
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PWR_IF_GetPortPDOs
</UL>

<P><STRONG><a name="[a0]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DpmRegisterReadCnf
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadSettingsFromFlash
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[1ee]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_SendMessage
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_ResetRequestProcess
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_Reset
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_Init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRL_ResetIndicate
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRL_Received
</UL>

<P><STRONG><a name="[1ef]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1f0]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[101]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPM_HWInit
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_UserCableDetection
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusb305_tcpc_set_rx_state
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_ResetDuringSwap
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_Reset
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DpmConfigSetCnf
</UL>

<P><STRONG><a name="[1f1]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[144]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_GetDataInfo
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DpmInitCnf
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PWR_IF_VBUSEnable
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[70]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1f2]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1f3]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[1f4]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1f5]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>BSP_GUI_LoadDataFromFlash</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, bsp_gui.o(i.BSP_GUI_LoadDataFromFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_GUI_LoadDataFromFlash &rArr; LoadSettingsFromFlash
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadSettingsFromFlash
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadPDOFromFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[7e]"></a>BSP_GUI_SaveDataInFlash</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, bsp_gui.o(i.BSP_GUI_SaveDataInFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BSP_GUI_SaveDataInFlash &rArr; SaveSettingsInFlash &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSettingsInFlash
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SavePDOInFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RXProcess
</UL>

<P><STRONG><a name="[4b]"></a>BSP_GetHWBoardVersionName</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbpd_tcpci.o(i.BSP_GetHWBoardVersionName))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[4a]"></a>BSP_GetPDTypeName</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbpd_tcpci.o(i.BSP_GetPDTypeName))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Channel4_5_6_7_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.DMA1_Channel4_5_6_7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA1_Channel4_5_6_7_IRQHandler &rArr; TRACER_EMB_IRQHandlerDMA
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACER_EMB_IRQHandlerDMA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.EXTI4_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = EXTI4_15_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; USBPD_TRACE_Add &rArr; USBPD_DPM_TraceWakeUp &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TRACE_Add
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[b5]"></a>FLASH_PageErase</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_hal_flash_ex.o(i.FLASH_PageErase))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[97]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f0xx_hal_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetErrorCode
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[43]"></a>GUI_FormatAndSendNotification</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gui_api.o(i.GUI_FormatAndSendNotification))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = GUI_FormatAndSendNotification &rArr; TRACER_EMB_Add &rArr; TRACER_EMB_WakeUpProcess &rArr; USBPD_DPM_TraceWakeUp &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SendNotification
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACER_EMB_Add
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SendAnswer
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RXProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_api.o(i.GUI_Init)
</UL>
<P><STRONG><a name="[9a]"></a>GUI_GetMessage</STRONG> (Thumb, 222 bytes, Stack size 20 bytes, gui_api.o(i.GUI_GetMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GUI_GetMessage &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CALLBACK_RX
</UL>

<P><STRONG><a name="[9e]"></a>GUI_Init</STRONG> (Thumb, 196 bytes, Stack size 80 bytes, gui_api.o(i.GUI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = GUI_Init &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GUI_LoadDataFromFlash
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_SetNotification_GUI
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[42]"></a>GUI_PostNotificationMessage</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, gui_api.o(i.GUI_PostNotificationMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GUI_PostNotificationMessage &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_api.o(i.GUI_Init)
</UL>
<P><STRONG><a name="[a2]"></a>GUI_RXProcess</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, gui_api.o(i.GUI_RXProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = GUI_RXProcess &rArr; GUI_SendAnswer &rArr; Request_MessageReq &rArr; USBPD_DPM_RequestMessageRequest &rArr; DPM_SNK_BuildRDOfromSelectedPDO &rArr; USBPD_TRACE_Add &rArr; USBPD_DPM_TraceWakeUp &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SystemReset
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SendAnswer
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FormatAndSendNotification
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GUI_SaveDataInFlash
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACER_EMB_Add
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskGUI
</UL>

<P><STRONG><a name="[41]"></a>GUI_SaveInfo</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, gui_api.o(i.GUI_SaveInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI_SaveInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_api.o(i.GUI_Init)
</UL>
<P><STRONG><a name="[a3]"></a>GUI_SendAnswer</STRONG> (Thumb, 318 bytes, Stack size 64 bytes, gui_api.o(i.GUI_SendAnswer))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = GUI_SendAnswer &rArr; Request_MessageReq &rArr; USBPD_DPM_RequestMessageRequest &rArr; DPM_SNK_BuildRDOfromSelectedPDO &rArr; USBPD_TRACE_Add &rArr; USBPD_DPM_TraceWakeUp &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FormatAndSendNotification
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DpmRegisterReadCnf
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DpmInitCnf
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DpmConfigSetCnf
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DpmConfigGetRej
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DpmConfigGetCnf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_MessageReq
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLV_init_encode
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLV_init_decode
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLV_get_string_length
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLV_get
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLV_deinit_encode
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLV_deinit_decode
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLV_add
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACER_EMB_Add
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RXProcess
</UL>

<P><STRONG><a name="[9b]"></a>GUI_SendNotification</STRONG> (Thumb, 1064 bytes, Stack size 120 bytes, gui_api.o(i.GUI_SendNotification))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = GUI_SendNotification &rArr; TLV_add
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLV_init_encode
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLV_get_string_length
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLV_deinit_encode
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLV_add
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FormatAndSendNotification
</UL>

<P><STRONG><a name="[146]"></a>GUI_TimerCounter</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gui_api.o(i.GUI_TimerCounter))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[b3]"></a>HAL_Delay</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, stm32f0xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPCI_Delay
</UL>

<P><STRONG><a name="[80]"></a>HAL_FLASHEx_Erase</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, stm32f0xx_hal_flash_ex.o(i.HAL_FLASHEx_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_MassErase
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PageErase
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GUI_SaveDataInFlash
</UL>

<P><STRONG><a name="[84]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_hal_flash.o(i.HAL_FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GUI_SaveDataInFlash
</UL>

<P><STRONG><a name="[81]"></a>HAL_FLASH_Program</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, stm32f0xx_hal_flash.o(i.HAL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_HalfWord
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GUI_SaveDataInFlash
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSettingsInFlash
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SavePDOInFlash
</UL>

<P><STRONG><a name="[7f]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f0xx_hal_flash.o(i.HAL_FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GUI_SaveDataInFlash
</UL>

<P><STRONG><a name="[b7]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, usbpd_dpm_user.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = HAL_GPIO_EXTI_Callback &rArr; USBPD_TRACE_Add &rArr; USBPD_DPM_TraceWakeUp &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetNumberOfTasks
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TRACE_Add
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaitingFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[96]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f0xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; USBPD_TRACE_Add &rArr; USBPD_DPM_TraceWakeUp &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
</UL>

<P><STRONG><a name="[c4]"></a>HAL_GPIO_Init</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, stm32f0xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPI_AlertInit
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>

<P><STRONG><a name="[98]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TRACE_Add
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpc_set_power
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RXProcess
</UL>

<P><STRONG><a name="[1a1]"></a>HAL_I2CEx_ConfigAnalogFilter</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f0xx_hal_i2c_ex.o(i.HAL_I2CEx_ConfigAnalogFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_I2CEx_ConfigAnalogFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPCI_Init
</UL>

<P><STRONG><a name="[ba]"></a>HAL_I2C_Init</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, stm32f0xx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPCI_Init
</UL>

<P><STRONG><a name="[bc]"></a>HAL_I2C_Mem_Read</STRONG> (Thumb, 340 bytes, Stack size 48 bytes, stm32f0xx_hal_i2c.o(i.HAL_I2C_Mem_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPCI_ReceiveBuffer
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPCI_ReadRegister
</UL>

<P><STRONG><a name="[c1]"></a>HAL_I2C_Mem_Write</STRONG> (Thumb, 334 bytes, Stack size 48 bytes, stm32f0xx_hal_i2c.o(i.HAL_I2C_Mem_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPCI_WriteRegister
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPCI_SendTransmitBuffer
</UL>

<P><STRONG><a name="[bb]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, usbpd_tcpci.o(i.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[147]"></a>HAL_IncTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[c5]"></a>HAL_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f0xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c6]"></a>HAL_InitTick</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f0xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_InitTick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[c7]"></a>HAL_MspInit</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, stm32f0xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[95]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f0xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
</UL>

<P><STRONG><a name="[15f]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_ALERT_Task
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPI_AlertInit
</UL>

<P><STRONG><a name="[ca]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f0xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPI_AlertInit
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a4]"></a>HAL_NVIC_SystemReset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_hal_cortex.o(i.HAL_NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RXProcess
</UL>

<P><STRONG><a name="[c8]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[c9]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f0xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[cc]"></a>HW_IF_PWR_Enable</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, usbpd_tcpci.o(i.HW_IF_PWR_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = HW_IF_PWR_Enable &rArr; USBPD_TRACE_Add &rArr; USBPD_DPM_TraceWakeUp &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TRACE_Add
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPM_set_vconn
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPM_VBUS_Enable
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPM_VBUS_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PWR_IF_VBUSEnable
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PWR_IF_VBUSDisable
</UL>

<P><STRONG><a name="[48]"></a>HW_IF_PWR_GetCurrent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbpd_tcpci.o(i.HW_IF_PWR_GetCurrent))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DPM_ManageAlert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[49]"></a>HW_IF_PWR_GetVoltage</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usbpd_tcpci.o(i.HW_IF_PWR_GetVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HW_IF_PWR_GetVoltage &rArr; USBPD_TCPM_VBUS_GetVoltage
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPM_VBUS_GetVoltage
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PWR_IF_SetProfile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[19d]"></a>HW_IF_PWR_SetVoltage</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbpd_tcpci.o(i.HW_IF_PWR_SetVoltage))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PWR_IF_SetProfile
</UL>

<P><STRONG><a name="[d1]"></a>HW_IF_PWR_VBUSIsEnabled</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbpd_tcpci.o(i.HW_IF_PWR_VBUSIsEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HW_IF_PWR_VBUSIsEnabled &rArr; USBPD_TCPM_VBUS_IsVsafe5V
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPM_VBUS_IsVsafe5V
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PWR_IF_VBUSIsEnabled
</UL>

<P><STRONG><a name="[154]"></a>HW_TRACER_EMB_IRQHandlerDMA</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tracer_emb_hw.o(i.HW_TRACER_EMB_IRQHandlerDMA))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACER_EMB_IRQHandlerDMA
</UL>

<P><STRONG><a name="[d3]"></a>HW_TRACER_EMB_IRQHandlerUSART</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, tracer_emb_hw.o(i.HW_TRACER_EMB_IRQHandlerUSART))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HW_TRACER_EMB_IRQHandlerUSART &rArr; TRACER_EMB_CALLBACK_TX
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACER_EMB_CALLBACK_TX
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACER_EMB_IRQHandlerUSART
</UL>

<P><STRONG><a name="[d5]"></a>HW_TRACER_EMB_Init</STRONG> (Thumb, 266 bytes, Stack size 48 bytes, tracer_emb_hw.o(i.HW_TRACER_EMB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = HW_TRACER_EMB_Init &rArr; LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinSpeed
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinPull
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinMode
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetAFPin_0_7
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_EnableClock
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACER_EMB_Init
</UL>

<P><STRONG><a name="[df]"></a>HW_TRACER_EMB_RegisterRxCallback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tracer_emb_hw.o(i.HW_TRACER_EMB_RegisterRxCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HW_TRACER_EMB_RegisterRxCallback &rArr; LL_APB1_GRP1_EnableClock
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACER_EMB_StartRX
</UL>

<P><STRONG><a name="[e0]"></a>HW_TRACER_EMB_SendData</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, tracer_emb_hw.o(i.HW_TRACER_EMB_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HW_TRACER_EMB_SendData &rArr; LL_APB1_GRP1_EnableClock
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACER_EMB_TX_Process
</UL>

<P><STRONG><a name="[e1]"></a>HW_TRACER_EMB_StartRX</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tracer_emb_hw.o(i.HW_TRACER_EMB_StartRX))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HW_TRACER_EMB_StartRX
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACER_EMB_StartRX
</UL>

<P><STRONG><a name="[1a]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[e4]"></a>LL_Init1msTick</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f0xx_ll_utils.o(i.LL_Init1msTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LL_Init1msTick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[e5]"></a>LL_RCC_GetSystemClocksFreq</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f0xx_ll_rcc.o(i.LL_RCC_GetSystemClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LL_RCC_GetSystemClocksFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK1ClockFreq
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetHCLKClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[e9]"></a>LL_RCC_GetUSARTClockFreq</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, stm32f0xx_ll_rcc.o(i.LL_RCC_GetUSARTClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK1ClockFreq
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetHCLKClockFreq
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSI_IsReady
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[149]"></a>LL_SetSystemCoreClock</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_ll_utils.o(i.LL_SetSystemCoreClock))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[dc]"></a>LL_USART_Init</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, stm32f0xx_ll_usart.o(i.LL_USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TRACER_EMB_Init
</UL>

<P><STRONG><a name="[19]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[ee]"></a>PE_Check_AMSConflict</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, usbpd_pe.o(i.PE_Check_AMSConflict))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PE_Check_AMSConflict &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_StateMachine_SRC
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_StateMachine_SNK
</UL>

<P><STRONG><a name="[18c]"></a>PE_Check_RxEvent</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, usbpd_pe.o(i.PE_Check_RxEvent))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_StateMachine_SRC
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_StateMachine_SNK
</UL>

<P><STRONG><a name="[120]"></a>PE_PRL_BistCompleted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbpd_pe.o(i.PE_PRL_BistCompleted))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRL_BistCompleted
</UL>

<P><STRONG><a name="[fa]"></a>PE_PRL_HardResetReceived</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, usbpd_pe.o(i.PE_PRL_HardResetReceived))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PE_PRL_HardResetReceived &rArr; USBPD_PRL_Reset &rArr; USBPD_PRL_EnableRX
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRL_ResetIndicate
</UL>

<P><STRONG><a name="[fc]"></a>PE_PRL_PostReceiveEvent</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, usbpd_pe.o(i.PE_PRL_PostReceiveEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PE_PRL_PostReceiveEvent &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_DisableRX
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRL_Received
</UL>

<P><STRONG><a name="[122]"></a>PE_PRL_PostReceiveEventComplete</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usbpd_pe.o(i.PE_PRL_PostReceiveEventComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PE_PRL_PostReceiveEventComplete
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRL_Received
</UL>

<P><STRONG><a name="[ff]"></a>PE_Reset</STRONG> (Thumb, 404 bytes, Stack size 40 bytes, usbpd_pe.o(i.PE_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = PE_Reset &rArr; USBPD_PRL_SetHeader &rArr; USBPD_TCPM_set_msg_header
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_SetHeader
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_Reset
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_CBL_SetHeaderSpecification
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_IsCableConnected
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_StateMachine_SRC
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_StateMachine_SNK
</UL>

<P><STRONG><a name="[102]"></a>PE_ResetDuringSwap</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, usbpd_pe.o(i.PE_ResetDuringSwap))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PE_ResetDuringSwap &rArr; USBPD_PRL_SetHeader &rArr; USBPD_TCPM_set_msg_header
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_SetHeader
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_StateMachine_SRC
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_StateMachine_SNK
</UL>

<P><STRONG><a name="[109]"></a>PE_Send_RESET</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, usbpd_pe.o(i.PE_Send_RESET))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = PE_Send_RESET &rArr; USBPD_PRL_ResetRequestProcess &rArr; USBPD_PHY_ResetRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_ResetRequestReset
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_ResetRequestProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_StateMachine_SRC
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_StateMachine_SNK
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_SubStateMachine_Generic
</UL>

<P><STRONG><a name="[10c]"></a>PE_StateMachine_SNK_ReadyWait</STRONG> (Thumb, 318 bytes, Stack size 24 bytes, usbpd_pe.o(i.PE_StateMachine_SNK_ReadyWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = PE_StateMachine_SNK_ReadyWait &rArr; PE_Check_ControlMessage &rArr; PE_Send_SRCCapabilities &rArr; USBPD_PRL_SendMessage &rArr; PRL_StateTXConstructMessage &rArr; USBPD_TCPM_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_Check_ExtendedMessage
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_Check_DataMessage
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_Check_ControlMessage
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_IsResistor_SinkTxOK
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_EnableRX
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_StateMachine_SNK
</UL>

<P><STRONG><a name="[113]"></a>PE_StateMachine_VDM</STRONG> (Thumb, 1872 bytes, Stack size 80 bytes, usbpd_pe.o(i.PE_StateMachine_VDM))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = PE_StateMachine_VDM &rArr; PE_Send_DataMessage &rArr; USBPD_PRL_SendMessage &rArr; PRL_StateTXConstructMessage &rArr; USBPD_TCPM_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_Send_DataMessage
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_SVDM_CheckSVIDs
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_Get_RxEvent
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_EnableRX
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_StateMachine_SRC
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_StateMachine_SNK
</UL>

<P><STRONG><a name="[116]"></a>PE_StateMachine_VDMCable</STRONG> (Thumb, 756 bytes, Stack size 56 bytes, usbpd_pe.o(i.PE_StateMachine_VDMCable))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = PE_StateMachine_VDMCable &rArr; PE_Send_DataMessage &rArr; USBPD_PRL_SendMessage &rArr; PRL_StateTXConstructMessage &rArr; USBPD_TCPM_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_Send_DataMessage
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_SVDM_CheckIdentity
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_Get_RxEvent
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_ExtRevisionInteroperability_Cable
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_EnableRX
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_CBL_SetHeaderSpecification
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_StateMachine_SRC
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_StateMachine_SNK
</UL>

<P><STRONG><a name="[17]"></a>PE_Trace_Empty</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbpd_pe.o(i.PE_Trace_Empty))
<BR>[Address Reference Count : 2]<UL><LI> usbpd_pe.o(i.USBPD_PE_SetTrace)
<LI> usbpd_pe.o(.data)
</UL>
<P><STRONG><a name="[e7]"></a>RCC_GetHCLKClockFreq</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_ll_rcc.o(i.RCC_GetHCLKClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
</UL>

<P><STRONG><a name="[e8]"></a>RCC_GetPCLK1ClockFreq</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_ll_rcc.o(i.RCC_GetPCLK1ClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
</UL>

<P><STRONG><a name="[e6]"></a>RCC_GetSystemClockFreq</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f0xx_ll_rcc.o(i.RCC_GetSystemClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
</UL>

<P><STRONG><a name="[125]"></a>RCC_PLL_GetFreqDomain_SYS</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f0xx_ll_rcc.o(i.RCC_PLL_GetFreqDomain_SYS))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
</UL>

<P><STRONG><a name="[1b]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, port.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SysTick_Handler &rArr; USBPD_DPM_TimerCounter &rArr; osSystickHandler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_TimerCounter
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TimerCounter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[148]"></a>SystemClock_Config</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemClock_Config &rArr; LL_Init1msTick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetSystemCoreClock
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init1msTick
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3f]"></a>SystemInit</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, system_stm32f0xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(.text)
</UL>
<P><STRONG><a name="[ac]"></a>TLV_add</STRONG> (Thumb, 154 bytes, Stack size 20 bytes, data_struct_tlv.o(i.TLV_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TLV_add
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SendNotification
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SendAnswer
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DpmInitCnf
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DpmConfigGetRej
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DpmConfigGetCnf
</UL>

<P><STRONG><a name="[142]"></a>TLV_addValue</STRONG> (Thumb, 118 bytes, Stack size 20 bytes, data_struct_tlv.o(i.TLV_addValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TLV_addValue
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DpmConfigSetCnf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_MessageReq
</UL>

<P><STRONG><a name="[b0]"></a>TLV_deinit_decode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, data_struct_tlv.o(i.TLV_deinit_decode))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SendAnswer
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_MessageReq
</UL>

<P><STRONG><a name="[b1]"></a>TLV_deinit_encode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, data_struct_tlv.o(i.TLV_deinit_encode))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SendNotification
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SendAnswer
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DpmRegisterReadCnf
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DpmInitCnf
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DpmConfigSetCnf
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DpmConfigGetRej
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DpmConfigGetCnf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_MessageReq
</UL>

<P><STRONG><a name="[af]"></a>TLV_get</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, data_struct_tlv.o(i.TLV_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TLV_get
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SendAnswer
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DpmConfigSetCnf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_MessageReq
</UL>

<P><STRONG><a name="[a7]"></a>TLV_get_string_length</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, data_struct_tlv.o(i.TLV_get_string_length))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SendNotification
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SendAnswer
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DpmConfigGetCnf
</UL>

<P><STRONG><a name="[ae]"></a>TLV_init_decode</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, data_struct_tlv.o(i.TLV_init_decode))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SendAnswer
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DpmConfigSetCnf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_MessageReq
</UL>

<P><STRONG><a name="[ab]"></a>TLV_init_encode</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, data_struct_tlv.o(i.TLV_init_encode))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SendNotification
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SendAnswer
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DpmRegisterReadCnf
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DpmInitCnf
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DpmConfigSetCnf
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DpmConfigGetRej
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DpmConfigGetCnf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_MessageReq
</UL>

<P><STRONG><a name="[9c]"></a>TRACER_EMB_Add</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, tracer_emb.o(i.TRACER_EMB_Add))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = TRACER_EMB_Add &rArr; TRACER_EMB_WakeUpProcess &rArr; USBPD_DPM_TraceWakeUp &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACER_EMB_UnLock
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACER_EMB_Lock
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACER_EMB_AllocateBufer
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACER_EMB_WakeUpProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SendAnswer
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RXProcess
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FormatAndSendNotification
</UL>

<P><STRONG><a name="[150]"></a>TRACER_EMB_AllocateBufer</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, tracer_emb.o(i.TRACER_EMB_AllocateBufer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TRACER_EMB_AllocateBufer
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TRACE_Add
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACER_EMB_Add
</UL>

<P><STRONG><a name="[d4]"></a>TRACER_EMB_CALLBACK_TX</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, tracer_emb.o(i.TRACER_EMB_CALLBACK_TX))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TRACER_EMB_CALLBACK_TX
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACER_EMB_UnLock
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACER_EMB_LowPowerSendDataComplete
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TRACER_EMB_IRQHandlerUSART
</UL>

<P><STRONG><a name="[85]"></a>TRACER_EMB_IRQHandlerDMA</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, tracer_emb.o(i.TRACER_EMB_IRQHandlerDMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TRACER_EMB_IRQHandlerDMA
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TRACER_EMB_IRQHandlerDMA
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_5_6_7_IRQHandler
</UL>

<P><STRONG><a name="[155]"></a>TRACER_EMB_IRQHandlerUSART</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, tracer_emb.o(i.TRACER_EMB_IRQHandlerUSART))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TRACER_EMB_IRQHandlerUSART &rArr; HW_TRACER_EMB_IRQHandlerUSART &rArr; TRACER_EMB_CALLBACK_TX
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TRACER_EMB_IRQHandlerUSART
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_4_IRQHandler
</UL>

<P><STRONG><a name="[156]"></a>TRACER_EMB_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tracer_emb.o(i.TRACER_EMB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = TRACER_EMB_Init &rArr; HW_TRACER_EMB_Init &rArr; LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACER_EMB_LowPowerInit
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TRACER_EMB_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TRACE_Init
</UL>

<P><STRONG><a name="[14f]"></a>TRACER_EMB_Lock</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tracer_emb.o(i.TRACER_EMB_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACER_EMB_TX_Process
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TRACE_Add
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACER_EMB_Add
</UL>

<P><STRONG><a name="[157]"></a>TRACER_EMB_LowPowerInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tracer_emb.o(i.TRACER_EMB_LowPowerInit))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACER_EMB_Init
</UL>

<P><STRONG><a name="[15a]"></a>TRACER_EMB_LowPowerSendData</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tracer_emb.o(i.TRACER_EMB_LowPowerSendData))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACER_EMB_TX_Process
</UL>

<P><STRONG><a name="[153]"></a>TRACER_EMB_LowPowerSendDataComplete</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tracer_emb.o(i.TRACER_EMB_LowPowerSendDataComplete))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACER_EMB_CALLBACK_TX
</UL>

<P><STRONG><a name="[158]"></a>TRACER_EMB_StartRX</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tracer_emb.o(i.TRACER_EMB_StartRX))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TRACER_EMB_StartRX &rArr; HW_TRACER_EMB_RegisterRxCallback &rArr; LL_APB1_GRP1_EnableClock
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TRACER_EMB_StartRX
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TRACER_EMB_RegisterRxCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskGUI
</UL>

<P><STRONG><a name="[159]"></a>TRACER_EMB_TX_Process</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, tracer_emb.o(i.TRACER_EMB_TX_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TRACER_EMB_TX_Process &rArr; HW_TRACER_EMB_SendData &rArr; LL_APB1_GRP1_EnableClock
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACER_EMB_Lock
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACER_EMB_LowPowerSendData
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TRACER_EMB_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TRACE_TX_Process
</UL>

<P><STRONG><a name="[151]"></a>TRACER_EMB_UnLock</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tracer_emb.o(i.TRACER_EMB_UnLock))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TRACE_Add
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACER_EMB_CALLBACK_TX
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACER_EMB_Add
</UL>

<P><STRONG><a name="[152]"></a>TRACER_EMB_WakeUpProcess</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, gui_api.o(i.TRACER_EMB_WakeUpProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = TRACER_EMB_WakeUpProcess &rArr; USBPD_DPM_TraceWakeUp &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_TraceWakeUp
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACER_EMB_Add
</UL>

<P><STRONG><a name="[1aa]"></a>TRACER_EMB_WriteData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tracer_emb.o(i.TRACER_EMB_WriteData))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TRACE_Add
</UL>

<P><STRONG><a name="[3b]"></a>USART3_4_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.USART3_4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART3_4_IRQHandler &rArr; TRACER_EMB_IRQHandlerUSART &rArr; HW_TRACER_EMB_IRQHandlerUSART &rArr; TRACER_EMB_CALLBACK_TX
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACER_EMB_IRQHandlerUSART
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[11b]"></a>USBDPD_PRL_BistCarrierEyeMode</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbpd_prl.o(i.USBDPD_PRL_BistCarrierEyeMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBDPD_PRL_BistCarrierEyeMode &rArr; USBPD_PHY_Send_BIST_Pattern
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_Send_BIST_Pattern
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_SubStateMachine_Generic
</UL>

<P><STRONG><a name="[11c]"></a>USBDPD_PRL_BistCarrierEyeModeExit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, usbpd_prl.o(i.USBDPD_PRL_BistCarrierEyeModeExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBDPD_PRL_BistCarrierEyeModeExit &rArr; USBPD_TCPM_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPM_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_SubStateMachine_Generic
</UL>

<P><STRONG><a name="[50]"></a>USBPD_ALERT_Task</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, usbpd_dpm_core.o(i.USBPD_ALERT_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = USBPD_ALERT_Task &rArr; USBPD_TRACE_Add &rArr; USBPD_DPM_TraceWakeUp &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPM_alert
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TRACE_Add
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbpd_dpm_core.o(.constdata)
</UL>
<P><STRONG><a name="[4e]"></a>USBPD_DPM_CADCallback</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, usbpd_dpm_core.o(i.USBPD_DPM_CADCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = USBPD_DPM_CADCallback &rArr; DPM_ManageAttachedState &rArr; USBPD_DPM_UserCableDetection &rArr; USBPD_DPM_PE_VconnPwr &rArr; USBPD_PWR_IF_Enable_VConn &rArr; USBPD_TRACE_Add &rArr; USBPD_DPM_TraceWakeUp &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_IsCableConnected
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_UserCableDetection
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DPM_ManageAttachedState
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TRACE_Add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbpd_dpm_core.o(.constdata)
</UL>
<P><STRONG><a name="[5f]"></a>USBPD_DPM_EvaluateDataRoleSwap</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usbpd_dpm_user.o(i.USBPD_DPM_EvaluateDataRoleSwap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBPD_DPM_EvaluateDataRoleSwap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbpd_dpm_core.o(.constdata)
</UL>
<P><STRONG><a name="[54]"></a>USBPD_DPM_EvaluatePowerRoleSwap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbpd_dpm_user.o(i.USBPD_DPM_EvaluatePowerRoleSwap))
<BR>[Address Reference Count : 1]<UL><LI> usbpd_dpm_core.o(.constdata)
</UL>
<P><STRONG><a name="[59]"></a>USBPD_DPM_EvaluateRequest</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, usbpd_dpm_user.o(i.USBPD_DPM_EvaluateRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBPD_DPM_EvaluateRequest &rArr; USBPD_PWR_IF_SearchRequestedPDO
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PWR_IF_SearchRequestedPDO
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbpd_dpm_core.o(.constdata)
</UL>
<P><STRONG><a name="[5d]"></a>USBPD_DPM_EvaluateVconnSwap</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbpd_dpm_user.o(i.USBPD_DPM_EvaluateVconnSwap))
<BR>[Address Reference Count : 1]<UL><LI> usbpd_dpm_core.o(.constdata)
</UL>
<P><STRONG><a name="[56]"></a>USBPD_DPM_ExtendedMessageReceived</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbpd_dpm_user.o(i.USBPD_DPM_ExtendedMessageReceived))
<BR>[Address Reference Count : 1]<UL><LI> usbpd_dpm_core.o(.constdata)
</UL>
<P><STRONG><a name="[57]"></a>USBPD_DPM_GetDataInfo</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, usbpd_dpm_user.o(i.USBPD_DPM_GetDataInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBPD_DPM_GetDataInfo &rArr; USBPD_PWR_IF_GetPortPDOs
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PWR_IF_GetPortPDOs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbpd_dpm_core.o(.constdata)
</UL>
<P><STRONG><a name="[53]"></a>USBPD_DPM_HardReset</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, usbpd_dpm_user.o(i.USBPD_DPM_HardReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = USBPD_DPM_HardReset &rArr; USBPD_PWR_IF_VBUSEnable &rArr; HW_IF_PWR_Enable &rArr; USBPD_TRACE_Add &rArr; USBPD_DPM_TraceWakeUp &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DPM_AssertRp
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PWR_IF_VBUSEnable
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PWR_IF_VBUSDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbpd_dpm_core.o(.constdata)
</UL>
<P><STRONG><a name="[164]"></a>USBPD_DPM_InitCore</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, usbpd_dpm_core.o(i.USBPD_DPM_InitCore))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = USBPD_DPM_InitCore &rArr; USBPD_TRACE_Init &rArr; TRACER_EMB_Init &rArr; HW_TRACER_EMB_Init &rArr; LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPM_HWInit
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_Init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_GetMemoryConsumption
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_CheckLIB
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TRACE_Init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPCI_Init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPCI_GetDevicesDrivers
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16c]"></a>USBPD_DPM_InitOS</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, usbpd_dpm_core.o(i.USBPD_DPM_InitOS))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = USBPD_DPM_InitOS &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPI_AlertInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[60]"></a>USBPD_DPM_IsPowerReady</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbpd_dpm_user.o(i.USBPD_DPM_IsPowerReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBPD_DPM_IsPowerReady &rArr; USBPD_PWR_IF_SupplyReady &rArr; USBPD_TCPM_VBUS_IsVsafe5V
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PWR_IF_SupplyReady
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbpd_dpm_core.o(.constdata)
</UL>
<P><STRONG><a name="[55]"></a>USBPD_DPM_Notification</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, usbpd_dpm_user.o(i.USBPD_DPM_Notification))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USBPD_DPM_Notification &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_Request_CableReset
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_RequestVconnSwap
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_RequestGetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbpd_dpm_core.o(.constdata)
</UL>
<P><STRONG><a name="[5e]"></a>USBPD_DPM_PE_VconnPwr</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, usbpd_dpm_user.o(i.USBPD_DPM_PE_VconnPwr))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = USBPD_DPM_PE_VconnPwr &rArr; USBPD_PWR_IF_Enable_VConn &rArr; USBPD_TRACE_Add &rArr; USBPD_DPM_TraceWakeUp &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PWR_IF_Enable_VConn
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PWR_IF_Disable_VConn
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_UserCableDetection
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_VDM_InformIdentity
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbpd_dpm_core.o(.constdata)
</UL>
<P><STRONG><a name="[5b]"></a>USBPD_DPM_PowerRoleSwap</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, usbpd_dpm_user.o(i.USBPD_DPM_PowerRoleSwap))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = USBPD_DPM_PowerRoleSwap &rArr; USBPD_PWR_IF_VBUSEnable &rArr; HW_IF_PWR_Enable &rArr; USBPD_TRACE_Add &rArr; USBPD_DPM_TraceWakeUp &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DPM_AssertRp
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPM_set_cc
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PWR_IF_VBUSEnable
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PWR_IF_VBUSDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbpd_dpm_core.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>USBPD_DPM_RequestAlert</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, usbpd_dpm_user.o(i.USBPD_DPM_RequestAlert))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBPD_DPM_RequestAlert &rArr; USBPD_PE_Request_DataMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_Request_DataMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_MessageReq
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DPM_ManageAlert
</UL>

<P><STRONG><a name="[131]"></a>USBPD_DPM_RequestCableReset</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usbpd_dpm_user.o(i.USBPD_DPM_RequestCableReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBPD_DPM_RequestCableReset &rArr; USBPD_PE_Request_CableReset
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_Request_CableReset
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_MessageReq
</UL>

<P><STRONG><a name="[12a]"></a>USBPD_DPM_RequestDataRoleSwap</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbpd_dpm_user.o(i.USBPD_DPM_RequestDataRoleSwap))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBPD_DPM_RequestDataRoleSwap &rArr; USBPD_PE_Request_CtrlMessage &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_Request_CtrlMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_MessageReq
</UL>

<P><STRONG><a name="[137]"></a>USBPD_DPM_RequestFastRoleSwap</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbpd_dpm_user.o(i.USBPD_DPM_RequestFastRoleSwap))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBPD_DPM_RequestFastRoleSwap &rArr; USBPD_PE_Request_CtrlMessage &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_Request_CtrlMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_MessageReq
</UL>

<P><STRONG><a name="[13e]"></a>USBPD_DPM_RequestGetBatteryCapability</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbpd_dpm_user.o(i.USBPD_DPM_RequestGetBatteryCapability))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_MessageReq
</UL>

<P><STRONG><a name="[13f]"></a>USBPD_DPM_RequestGetBatteryStatus</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbpd_dpm_user.o(i.USBPD_DPM_RequestGetBatteryStatus))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_MessageReq
</UL>

<P><STRONG><a name="[139]"></a>USBPD_DPM_RequestGetCountryCodes</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbpd_dpm_user.o(i.USBPD_DPM_RequestGetCountryCodes))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBPD_DPM_RequestGetCountryCodes &rArr; USBPD_PE_Request_CtrlMessage &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_Request_CtrlMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_MessageReq
</UL>

<P><STRONG><a name="[13d]"></a>USBPD_DPM_RequestGetCountryInfo</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, usbpd_dpm_user.o(i.USBPD_DPM_RequestGetCountryInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBPD_DPM_RequestGetCountryInfo &rArr; USBPD_PE_Request_DataMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_Request_DataMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_MessageReq
</UL>

<P><STRONG><a name="[140]"></a>USBPD_DPM_RequestGetManufacturerInfo</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbpd_dpm_user.o(i.USBPD_DPM_RequestGetManufacturerInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBPD_DPM_RequestGetManufacturerInfo &rArr; USBPD_PE_SendExtendedMessage &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_SendExtendedMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_MessageReq
</UL>

<P><STRONG><a name="[138]"></a>USBPD_DPM_RequestGetPPS_Status</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbpd_dpm_user.o(i.USBPD_DPM_RequestGetPPS_Status))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_MessageReq
</UL>

<P><STRONG><a name="[129]"></a>USBPD_DPM_RequestGetSinkCapability</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbpd_dpm_user.o(i.USBPD_DPM_RequestGetSinkCapability))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBPD_DPM_RequestGetSinkCapability &rArr; USBPD_PE_Request_CtrlMessage &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_Request_CtrlMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_MessageReq
</UL>

<P><STRONG><a name="[13c]"></a>USBPD_DPM_RequestGetSinkCapabilityExt</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbpd_dpm_user.o(i.USBPD_DPM_RequestGetSinkCapabilityExt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBPD_DPM_RequestGetSinkCapabilityExt &rArr; USBPD_PE_Request_CtrlMessage &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_Request_CtrlMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_MessageReq
</UL>

<P><STRONG><a name="[128]"></a>USBPD_DPM_RequestGetSourceCapability</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbpd_dpm_user.o(i.USBPD_DPM_RequestGetSourceCapability))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBPD_DPM_RequestGetSourceCapability &rArr; USBPD_PE_Request_CtrlMessage &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_Request_CtrlMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_MessageReq
</UL>

<P><STRONG><a name="[13b]"></a>USBPD_DPM_RequestGetSourceCapabilityExt</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbpd_dpm_user.o(i.USBPD_DPM_RequestGetSourceCapabilityExt))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_MessageReq
</UL>

<P><STRONG><a name="[13a]"></a>USBPD_DPM_RequestGetStatus</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbpd_dpm_user.o(i.USBPD_DPM_RequestGetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBPD_DPM_RequestGetStatus &rArr; USBPD_PE_Request_CtrlMessage &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_Request_CtrlMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_Notification
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_MessageReq
</UL>

<P><STRONG><a name="[126]"></a>USBPD_DPM_RequestGotoMin</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbpd_dpm_user.o(i.USBPD_DPM_RequestGotoMin))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBPD_DPM_RequestGotoMin &rArr; USBPD_PE_Request_CtrlMessage &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_Request_CtrlMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_MessageReq
</UL>

<P><STRONG><a name="[130]"></a>USBPD_DPM_RequestHardReset</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usbpd_dpm_user.o(i.USBPD_DPM_RequestHardReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBPD_DPM_RequestHardReset &rArr; USBPD_PE_Request_HardReset
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_Request_HardReset
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_MessageReq
</UL>

<P><STRONG><a name="[12e]"></a>USBPD_DPM_RequestMessageRequest</STRONG> (Thumb, 148 bytes, Stack size 72 bytes, usbpd_dpm_user.o(i.USBPD_DPM_RequestMessageRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = USBPD_DPM_RequestMessageRequest &rArr; DPM_SNK_BuildRDOfromSelectedPDO &rArr; USBPD_TRACE_Add &rArr; USBPD_DPM_TraceWakeUp &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_Send_Request
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_SNK_EvaluateMatchWithSRCPDO
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DPM_SNK_BuildRDOfromSelectedPDO
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_MessageReq
</UL>

<P><STRONG><a name="[127]"></a>USBPD_DPM_RequestPing</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbpd_dpm_user.o(i.USBPD_DPM_RequestPing))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBPD_DPM_RequestPing &rArr; USBPD_PE_Request_CtrlMessage &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_Request_CtrlMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_MessageReq
</UL>

<P><STRONG><a name="[12b]"></a>USBPD_DPM_RequestPowerRoleSwap</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbpd_dpm_user.o(i.USBPD_DPM_RequestPowerRoleSwap))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBPD_DPM_RequestPowerRoleSwap &rArr; USBPD_PE_Request_CtrlMessage &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_Request_CtrlMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_MessageReq
</UL>

<P><STRONG><a name="[141]"></a>USBPD_DPM_RequestSecurityRequest</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbpd_dpm_user.o(i.USBPD_DPM_RequestSecurityRequest))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_MessageReq
</UL>

<P><STRONG><a name="[12f]"></a>USBPD_DPM_RequestSoftReset</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbpd_dpm_user.o(i.USBPD_DPM_RequestSoftReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBPD_DPM_RequestSoftReset &rArr; USBPD_PE_Request_CtrlMessage &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_Request_CtrlMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_MessageReq
</UL>

<P><STRONG><a name="[12d]"></a>USBPD_DPM_RequestSourceCapability</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbpd_dpm_user.o(i.USBPD_DPM_RequestSourceCapability))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBPD_DPM_RequestSourceCapability &rArr; USBPD_PE_Request_DataMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_Request_DataMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_MessageReq
</UL>

<P><STRONG><a name="[132]"></a>USBPD_DPM_RequestVDM_DiscoveryIdentify</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usbpd_dpm_user.o(i.USBPD_DPM_RequestVDM_DiscoveryIdentify))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBPD_DPM_RequestVDM_DiscoveryIdentify &rArr; USBPD_PE_SVDM_RequestIdentity
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_SVDM_RequestIdentity
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_MessageReq
</UL>

<P><STRONG><a name="[134]"></a>USBPD_DPM_RequestVDM_DiscoveryMode</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usbpd_dpm_user.o(i.USBPD_DPM_RequestVDM_DiscoveryMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBPD_DPM_RequestVDM_DiscoveryMode &rArr; USBPD_PE_SVDM_RequestMode
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_SVDM_RequestMode
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_MessageReq
</UL>

<P><STRONG><a name="[133]"></a>USBPD_DPM_RequestVDM_DiscoverySVID</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usbpd_dpm_user.o(i.USBPD_DPM_RequestVDM_DiscoverySVID))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBPD_DPM_RequestVDM_DiscoverySVID &rArr; USBPD_PE_SVDM_RequestSVID
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_SVDM_RequestSVID
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_MessageReq
</UL>

<P><STRONG><a name="[135]"></a>USBPD_DPM_RequestVDM_EnterMode</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usbpd_dpm_user.o(i.USBPD_DPM_RequestVDM_EnterMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBPD_DPM_RequestVDM_EnterMode &rArr; USBPD_PE_SVDM_RequestModeEnter
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_SVDM_RequestModeEnter
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_MessageReq
</UL>

<P><STRONG><a name="[136]"></a>USBPD_DPM_RequestVDM_ExitMode</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usbpd_dpm_user.o(i.USBPD_DPM_RequestVDM_ExitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBPD_DPM_RequestVDM_ExitMode &rArr; USBPD_PE_SVDM_RequestModeExit
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_SVDM_RequestModeExit
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_MessageReq
</UL>

<P><STRONG><a name="[12c]"></a>USBPD_DPM_RequestVconnSwap</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbpd_dpm_user.o(i.USBPD_DPM_RequestVconnSwap))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBPD_DPM_RequestVconnSwap &rArr; USBPD_PE_Request_CtrlMessage &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_Request_CtrlMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_Notification
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_MessageReq
</UL>

<P><STRONG><a name="[17b]"></a>USBPD_DPM_Run</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usbpd_dpm_core.o(i.USBPD_DPM_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USBPD_DPM_Run &rArr; osKernelStart &rArr; vTaskStartScheduler &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5a]"></a>USBPD_DPM_SNK_EvaluateCapabilities</STRONG> (Thumb, 190 bytes, Stack size 112 bytes, usbpd_dpm_user.o(i.USBPD_DPM_SNK_EvaluateCapabilities))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = USBPD_DPM_SNK_EvaluateCapabilities &rArr; DPM_SNK_BuildRDOfromSelectedPDO &rArr; USBPD_TRACE_Add &rArr; USBPD_DPM_TraceWakeUp &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TRACE_Add
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PWR_IF_GetPortPDOs
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DPM_SNK_BuildRDOfromSelectedPDO
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DPM_FindVoltageIndex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbpd_dpm_core.o(.constdata)
</UL>
<P><STRONG><a name="[89]"></a>USBPD_DPM_SNK_EvaluateMatchWithSRCPDO</STRONG> (Thumb, 584 bytes, Stack size 120 bytes, usbpd_dpm_user.o(i.USBPD_DPM_SNK_EvaluateMatchWithSRCPDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USBPD_DPM_SNK_EvaluateMatchWithSRCPDO &rArr; USBPD_PWR_IF_GetPortPDOs
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PWR_IF_GetPortPDOs
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_RequestMessageRequest
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DPM_FindVoltageIndex
</UL>

<P><STRONG><a name="[58]"></a>USBPD_DPM_SetDataInfo</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, usbpd_dpm_user.o(i.USBPD_DPM_SetDataInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBPD_DPM_SetDataInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbpd_dpm_core.o(.constdata)
</UL>
<P><STRONG><a name="[9f]"></a>USBPD_DPM_SetNotification_GUI</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbpd_dpm_user.o(i.USBPD_DPM_SetNotification_GUI))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[52]"></a>USBPD_DPM_SetupNewPower</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, usbpd_dpm_user.o(i.USBPD_DPM_SetupNewPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBPD_DPM_SetupNewPower &rArr; USBPD_PWR_IF_SetProfile &rArr; USBPD_PWR_IF_VBUSIsEnabled &rArr; HW_IF_PWR_VBUSIsEnabled &rArr; USBPD_TCPM_VBUS_IsVsafe5V
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PWR_IF_SetProfile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbpd_dpm_core.o(.constdata)
</UL>
<P><STRONG><a name="[145]"></a>USBPD_DPM_TimerCounter</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, usbpd_dpm_core.o(i.USBPD_DPM_TimerCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBPD_DPM_TimerCounter &rArr; osSystickHandler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetNumberOfTasks
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_TimerCounter
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_TimerCounter
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_UserTimerCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[15b]"></a>USBPD_DPM_TraceWakeUp</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbpd_dpm_core.o(i.USBPD_DPM_TraceWakeUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USBPD_DPM_TraceWakeUp &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TRACE_Add
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACER_EMB_WakeUpProcess
</UL>

<P><STRONG><a name="[90]"></a>USBPD_DPM_UserCableDetection</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, usbpd_dpm_user.o(i.USBPD_DPM_UserCableDetection))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = USBPD_DPM_UserCableDetection &rArr; USBPD_DPM_PE_VconnPwr &rArr; USBPD_PWR_IF_Enable_VConn &rArr; USBPD_TRACE_Add &rArr; USBPD_DPM_TraceWakeUp &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_PE_VconnPwr
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPM_set_vconn
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_CADCallback
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DPM_ManageAttachedState
</UL>

<P><STRONG><a name="[61]"></a>USBPD_DPM_UserExecute</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, usbpd_dpm_user.o(i.USBPD_DPM_UserExecute))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = USBPD_DPM_UserExecute &rArr; DPM_ManageAlert &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DPM_ManageAlert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbpd_dpm_user.o(.constdata)
</UL>
<P><STRONG><a name="[182]"></a>USBPD_DPM_UserInit</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, usbpd_dpm_user.o(i.USBPD_DPM_UserInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = USBPD_DPM_UserInit &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_VDM_UserInit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PWR_IF_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17e]"></a>USBPD_DPM_UserTimerCounter</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usbpd_dpm_user.o(i.USBPD_DPM_UserTimerCounter))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_TimerCounter
</UL>

<P><STRONG><a name="[91]"></a>USBPD_DPM_WaitForTime</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usbpd_dpm_user.o(i.USBPD_DPM_WaitForTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBPD_DPM_WaitForTime &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DPM_ManageAttachedState
</UL>

<P><STRONG><a name="[165]"></a>USBPD_PE_CheckLIB</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbpd_pe.o(i.USBPD_PE_CheckLIB))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_InitCore
</UL>

<P><STRONG><a name="[166]"></a>USBPD_PE_GetMemoryConsumption</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbpd_pe.o(i.USBPD_PE_GetMemoryConsumption))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBPD_PE_GetMemoryConsumption
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_GetMemoryConsumption
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_InitCore
</UL>

<P><STRONG><a name="[16b]"></a>USBPD_PE_Init</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, usbpd_pe.o(i.USBPD_PE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = USBPD_PE_Init &rArr; USBPD_PRL_Init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_SetHeader
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_CBL_SetHeaderSpecification
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_InitCore
</UL>

<P><STRONG><a name="[1ad]"></a>USBPD_PE_InitVDM_Callback</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbpd_pe.o(i.USBPD_PE_InitVDM_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_VDM_UserInit
</UL>

<P><STRONG><a name="[8f]"></a>USBPD_PE_IsCableConnected</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, usbpd_pe.o(i.USBPD_PE_IsCableConnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USBPD_PE_IsCableConnected &rArr; PE_Reset &rArr; USBPD_PRL_SetHeader &rArr; USBPD_TCPM_set_msg_header
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_CADCallback
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DPM_ManageAttachedState
</UL>

<P><STRONG><a name="[16f]"></a>USBPD_PE_Request_CableReset</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usbpd_pe.o(i.USBPD_PE_Request_CableReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBPD_PE_Request_CableReset
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_Notification
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_RequestCableReset
</UL>

<P><STRONG><a name="[173]"></a>USBPD_PE_Request_CtrlMessage</STRONG> (Thumb, 468 bytes, Stack size 32 bytes, usbpd_pe.o(i.USBPD_PE_Request_CtrlMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBPD_PE_Request_CtrlMessage &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_RequestVconnSwap
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_RequestSoftReset
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_RequestPowerRoleSwap
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_RequestPing
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_RequestGotoMin
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_RequestGetStatus
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_RequestGetSourceCapability
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_RequestGetSinkCapabilityExt
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_RequestGetSinkCapability
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_RequestGetCountryCodes
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_RequestFastRoleSwap
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_RequestDataRoleSwap
</UL>

<P><STRONG><a name="[172]"></a>USBPD_PE_Request_DataMessage</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, usbpd_pe.o(i.USBPD_PE_Request_DataMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBPD_PE_Request_DataMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_RequestSourceCapability
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_RequestGetCountryInfo
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_RequestAlert
</UL>

<P><STRONG><a name="[8c]"></a>USBPD_PE_Request_HardReset</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usbpd_pe.o(i.USBPD_PE_Request_HardReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBPD_PE_Request_HardReset
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_RequestHardReset
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DPM_ManageAlert
</UL>

<P><STRONG><a name="[176]"></a>USBPD_PE_SVDM_RequestIdentity</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, usbpd_pe.o(i.USBPD_PE_SVDM_RequestIdentity))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBPD_PE_SVDM_RequestIdentity
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_RequestVDM_DiscoveryIdentify
</UL>

<P><STRONG><a name="[177]"></a>USBPD_PE_SVDM_RequestMode</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, usbpd_pe.o(i.USBPD_PE_SVDM_RequestMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBPD_PE_SVDM_RequestMode
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_RequestVDM_DiscoveryMode
</UL>

<P><STRONG><a name="[179]"></a>USBPD_PE_SVDM_RequestModeEnter</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, usbpd_pe.o(i.USBPD_PE_SVDM_RequestModeEnter))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBPD_PE_SVDM_RequestModeEnter
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_RequestVDM_EnterMode
</UL>

<P><STRONG><a name="[17a]"></a>USBPD_PE_SVDM_RequestModeExit</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, usbpd_pe.o(i.USBPD_PE_SVDM_RequestModeExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBPD_PE_SVDM_RequestModeExit
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_RequestVDM_ExitMode
</UL>

<P><STRONG><a name="[178]"></a>USBPD_PE_SVDM_RequestSVID</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, usbpd_pe.o(i.USBPD_PE_SVDM_RequestSVID))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBPD_PE_SVDM_RequestSVID
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_RequestVDM_DiscoverySVID
</UL>

<P><STRONG><a name="[174]"></a>USBPD_PE_SendExtendedMessage</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, usbpd_pe.o(i.USBPD_PE_SendExtendedMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBPD_PE_SendExtendedMessage &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_RequestGetManufacturerInfo
</UL>

<P><STRONG><a name="[175]"></a>USBPD_PE_Send_Request</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, usbpd_pe.o(i.USBPD_PE_Send_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBPD_PE_Send_Request
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_RequestMessageRequest
</UL>

<P><STRONG><a name="[1ab]"></a>USBPD_PE_SetTrace</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbpd_pe.o(i.USBPD_PE_SetTrace))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TRACE_Init
</UL>

<P><STRONG><a name="[189]"></a>USBPD_PE_StateMachine_DRP</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usbpd_pe.o(i.USBPD_PE_StateMachine_DRP))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = USBPD_PE_StateMachine_DRP &rArr; USBPD_PE_StateMachine_SNK &rArr; PE_SubStateMachine_Generic &rArr; PE_SubStateMachine_ReceiveDRS &rArr; PE_Send_CtrlMessage &rArr; USBPD_PRL_SendMessage &rArr; PRL_StateTXConstructMessage &rArr; USBPD_TCPM_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_StateMachine_SRC
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_StateMachine_SNK
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_Task
</UL>

<P><STRONG><a name="[18b]"></a>USBPD_PE_StateMachine_SNK</STRONG> (Thumb, 4138 bytes, Stack size 80 bytes, usbpd_pe.o(i.USBPD_PE_StateMachine_SNK))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = USBPD_PE_StateMachine_SNK &rArr; PE_SubStateMachine_Generic &rArr; PE_SubStateMachine_ReceiveDRS &rArr; PE_Send_CtrlMessage &rArr; USBPD_PRL_SendMessage &rArr; PRL_StateTXConstructMessage &rArr; USBPD_TCPM_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_StateMachine_VDMCable
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_StateMachine_VDM
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_StateMachine_SNK_ReadyWait
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_Send_RESET
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_ResetDuringSwap
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_Reset
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_Check_RxEvent
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_Check_AMSConflict
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_SubStateMachine_VconnSwap
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_SubStateMachine_Generic
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_SubStateMachine_ExtendedMessages
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_StateMachine_UVDM
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_StateMachine_SNK_SelectCapa
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_Send_DataMessage
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_Send_CtrlMessage
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_PerformSoftReset
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_ExtRevisionInteroperability
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_Check_ExtendedMessage
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_ChangePowerRole
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_SetHeaderPowerRole
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_SRCSetSinkNG
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_SRCReleaseSinkNG
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_SOPCapability
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_Reset
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_PowerSinkReset
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_EnableRX
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_DisableRX
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_StateMachine_DRP
</UL>

<P><STRONG><a name="[18a]"></a>USBPD_PE_StateMachine_SRC</STRONG> (Thumb, 4118 bytes, Stack size 56 bytes, usbpd_pe.o(i.USBPD_PE_StateMachine_SRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = USBPD_PE_StateMachine_SRC &rArr; PE_SubStateMachine_Generic &rArr; PE_SubStateMachine_ReceiveDRS &rArr; PE_Send_CtrlMessage &rArr; USBPD_PRL_SendMessage &rArr; PRL_StateTXConstructMessage &rArr; USBPD_TCPM_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_StateMachine_VDMCable
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_StateMachine_VDM
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_Send_RESET
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_ResetDuringSwap
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_Reset
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_Check_RxEvent
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_Check_AMSConflict
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_SubStateMachine_VconnSwap
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_SubStateMachine_Generic
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_SubStateMachine_ExtendedMessages
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_StateMachine_UVDM
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_StateMachine_SRC_SendCapa
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_StateMachine_SRC_NegocCapa
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_Send_ExtendedMessage
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_Send_DataMessage
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_Send_CtrlMessage
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_PerformSoftReset
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_ExtRevisionInteroperability
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_Check_ExtendedMessage
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_Check_DataMessage
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_Check_ControlMessage
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_ChangePowerRole
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_SetHeaderPowerRole
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_SRCReleaseSinkNG
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_SOPCapability
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_PowerSinkReset
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_EnableRX
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_DisableRX
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_StateMachine_DRP
</UL>

<P><STRONG><a name="[4f]"></a>USBPD_PE_Task</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, usbpd_dpm_core.o(i.USBPD_PE_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = USBPD_PE_Task &rArr; USBPD_PE_StateMachine_DRP &rArr; USBPD_PE_StateMachine_SNK &rArr; PE_SubStateMachine_Generic &rArr; PE_SubStateMachine_ReceiveDRS &rArr; PE_Send_CtrlMessage &rArr; USBPD_PRL_SendMessage &rArr; PRL_StateTXConstructMessage &rArr; USBPD_TCPM_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_StateMachine_DRP
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPM_VBUS_IsVsafe5V
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbpd_dpm_core.o(.constdata)
</UL>
<P><STRONG><a name="[17f]"></a>USBPD_PE_TimerCounter</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, usbpd_pe.o(i.USBPD_PE_TimerCounter))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_TimerCounter
</UL>

<P><STRONG><a name="[190]"></a>USBPD_PHY_DisableRX</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbpd_tcpm.o(i.USBPD_PHY_DisableRX))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_DisableRX
</UL>

<P><STRONG><a name="[191]"></a>USBPD_PHY_EnableRX</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbpd_tcpm.o(i.USBPD_PHY_EnableRX))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_EnableRX
</UL>

<P><STRONG><a name="[192]"></a>USBPD_PHY_Init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, usbpd_tcpm.o(i.USBPD_PHY_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBPD_PHY_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_Init
</UL>

<P><STRONG><a name="[193]"></a>USBPD_PHY_IsResistor_SinkTxOk</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usbpd_tcpm.o(i.USBPD_PHY_IsResistor_SinkTxOk))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_SendMessage
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_IsResistor_SinkTxOK
</UL>

<P><STRONG><a name="[194]"></a>USBPD_PHY_Reset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbpd_tcpm.o(i.USBPD_PHY_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_SendMessage
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_Reset
</UL>

<P><STRONG><a name="[195]"></a>USBPD_PHY_ResetRequest</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, usbpd_tcpm.o(i.USBPD_PHY_ResetRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBPD_PHY_ResetRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_ResetRequestProcess
</UL>

<P><STRONG><a name="[196]"></a>USBPD_PHY_SOPSupported</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbpd_tcpm.o(i.USBPD_PHY_SOPSupported))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBPD_PHY_SOPSupported
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_SOPCapability
</UL>

<P><STRONG><a name="[15d]"></a>USBPD_PHY_Send_BIST_Pattern</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, usbpd_tcpm.o(i.USBPD_PHY_Send_BIST_Pattern))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBPD_PHY_Send_BIST_Pattern
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDPD_PRL_BistCarrierEyeMode
</UL>

<P><STRONG><a name="[198]"></a>USBPD_PHY_SetResistor_SinkTxNG</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbpd_tcpm.o(i.USBPD_PHY_SetResistor_SinkTxNG))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_SendMessage
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_SRCSetSinkNG
</UL>

<P><STRONG><a name="[197]"></a>USBPD_PHY_SetResistor_SinkTxOK</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbpd_tcpm.o(i.USBPD_PHY_SetResistor_SinkTxOK))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_SRCReleaseSinkNG
</UL>

<P><STRONG><a name="[f9]"></a>USBPD_PRL_CBL_SetHeaderSpecification</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, usbpd_prl.o(i.USBPD_PRL_CBL_SetHeaderSpecification))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBPD_PRL_CBL_SetHeaderSpecification
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_Init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_StateMachine_VDMCable
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_Reset
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_ExtRevisionInteroperability_Cable
</UL>

<P><STRONG><a name="[fd]"></a>USBPD_PRL_DisableRX</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbpd_prl.o(i.USBPD_PRL_DisableRX))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBPD_PRL_DisableRX
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_DisableRX
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_StateMachine_SRC
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_StateMachine_SNK
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_PRL_PostReceiveEvent
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_ResetRequestProcess
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRL_ResetIndicate
</UL>

<P><STRONG><a name="[f0]"></a>USBPD_PRL_EnableRX</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbpd_prl.o(i.USBPD_PRL_EnableRX))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBPD_PRL_EnableRX
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_EnableRX
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_StateMachine_SRC
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_StateMachine_SNK
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_StateMachine_VDMCable
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_StateMachine_VDM
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_StateMachine_SNK_ReadyWait
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_SubStateMachine_VconnSwap
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_SubStateMachine_Generic
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_StateMachine_SNK_SelectCapa
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_Check_ControlMessage
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_Reset
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_PowerSinkReset
</UL>

<P><STRONG><a name="[186]"></a>USBPD_PRL_GetMemoryConsumption</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbpd_prl.o(i.USBPD_PRL_GetMemoryConsumption))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_GetMemoryConsumption
</UL>

<P><STRONG><a name="[188]"></a>USBPD_PRL_Init</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, usbpd_prl.o(i.USBPD_PRL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USBPD_PRL_Init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_Init
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_Init
</UL>

<P><STRONG><a name="[10d]"></a>USBPD_PRL_IsResistor_SinkTxOK</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usbpd_prl.o(i.USBPD_PRL_IsResistor_SinkTxOK))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBPD_PRL_IsResistor_SinkTxOK
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_IsResistor_SinkTxOk
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_StateMachine_SNK_ReadyWait
</UL>

<P><STRONG><a name="[18e]"></a>USBPD_PRL_PowerSinkReset</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usbpd_prl.o(i.USBPD_PRL_PowerSinkReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBPD_PRL_PowerSinkReset &rArr; USBPD_PRL_EnableRX
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_EnableRX
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_StateMachine_SRC
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_StateMachine_SNK
</UL>

<P><STRONG><a name="[119]"></a>USBPD_PRL_PrepareChunkRequest</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, usbpd_prl.o(i.USBPD_PRL_PrepareChunkRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBPD_PRL_PrepareChunkRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_SubStateMachine_ExtendedMessages
</UL>

<P><STRONG><a name="[118]"></a>USBPD_PRL_PrepareExtendedTxChunkSending</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, usbpd_prl.o(i.USBPD_PRL_PrepareExtendedTxChunkSending))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBPD_PRL_PrepareExtendedTxChunkSending
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_SubStateMachine_ExtendedMessages
</UL>

<P><STRONG><a name="[fb]"></a>USBPD_PRL_Reset</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, usbpd_prl.o(i.USBPD_PRL_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBPD_PRL_Reset &rArr; USBPD_PRL_EnableRX
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_Reset
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_EnableRX
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_StateMachine_SNK
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_ResetDuringSwap
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_Reset
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_PRL_HardResetReceived
</UL>

<P><STRONG><a name="[10b]"></a>USBPD_PRL_ResetRequestProcess</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, usbpd_prl.o(i.USBPD_PRL_ResetRequestProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBPD_PRL_ResetRequestProcess &rArr; USBPD_PHY_ResetRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_ResetRequest
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_DisableRX
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_Send_RESET
</UL>

<P><STRONG><a name="[10a]"></a>USBPD_PRL_ResetRequestReset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbpd_prl.o(i.USBPD_PRL_ResetRequestReset))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_Send_RESET
</UL>

<P><STRONG><a name="[18d]"></a>USBPD_PRL_SOPCapability</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usbpd_prl.o(i.USBPD_PRL_SOPCapability))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBPD_PRL_SOPCapability &rArr; USBPD_PHY_SOPSupported
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_SOPSupported
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_StateMachine_SRC
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_StateMachine_SNK
</UL>

<P><STRONG><a name="[111]"></a>USBPD_PRL_SRCReleaseSinkNG</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbpd_prl.o(i.USBPD_PRL_SRCReleaseSinkNG))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBPD_PRL_SRCReleaseSinkNG
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_SetResistor_SinkTxOK
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_StateMachine_SRC
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_StateMachine_SNK
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_StateMachine_SRC_SendCapa
</UL>

<P><STRONG><a name="[18f]"></a>USBPD_PRL_SRCSetSinkNG</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usbpd_prl.o(i.USBPD_PRL_SRCSetSinkNG))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBPD_PRL_SRCSetSinkNG
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_SetResistor_SinkTxNG
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_StateMachine_SNK
</UL>

<P><STRONG><a name="[105]"></a>USBPD_PRL_SendMessage</STRONG> (Thumb, 460 bytes, Stack size 40 bytes, usbpd_prl.o(i.USBPD_PRL_SendMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBPD_PRL_SendMessage &rArr; PRL_StateTXConstructMessage &rArr; USBPD_TCPM_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_SetResistor_SinkTxNG
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_Reset
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_IsResistor_SinkTxOk
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRL_StateTXConstructMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_SubStateMachine_ExtendedMessages
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_Send_SRCCapabilities
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_Send_ExtendedMessage
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_Send_DataMessage
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_Send_CtrlMessage
</UL>

<P><STRONG><a name="[100]"></a>USBPD_PRL_SetHeader</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, usbpd_prl.o(i.USBPD_PRL_SetHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBPD_PRL_SetHeader &rArr; USBPD_TCPM_set_msg_header
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPM_set_msg_header
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_Init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_ResetDuringSwap
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_Reset
</UL>

<P><STRONG><a name="[11e]"></a>USBPD_PRL_SetHeaderDataRole</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, usbpd_prl.o(i.USBPD_PRL_SetHeaderDataRole))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBPD_PRL_SetHeaderDataRole &rArr; USBPD_TCPM_set_msg_header
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPM_set_msg_header
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_SubStateMachine_ReceiveDRS
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_SubStateMachine_Generic
</UL>

<P><STRONG><a name="[ed]"></a>USBPD_PRL_SetHeaderPowerRole</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, usbpd_prl.o(i.USBPD_PRL_SetHeaderPowerRole))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBPD_PRL_SetHeaderPowerRole &rArr; USBPD_TCPM_set_msg_header
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPM_set_msg_header
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_StateMachine_SRC
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_StateMachine_SNK
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_PerformSoftReset
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_ChangePowerRole
</UL>

<P><STRONG><a name="[f7]"></a>USBPD_PRL_SetHeaderSpecification</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, usbpd_prl.o(i.USBPD_PRL_SetHeaderSpecification))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBPD_PRL_SetHeaderSpecification &rArr; USBPD_TCPM_set_msg_header
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPM_set_msg_header
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_ExtRevisionInteroperability
</UL>

<P><STRONG><a name="[180]"></a>USBPD_PRL_TimerCounter</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usbpd_prl.o(i.USBPD_PRL_TimerCounter))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_TimerCounter
</UL>

<P><STRONG><a name="[19a]"></a>USBPD_PWR_IF_CheckUpdateSNKPower</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, usbpd_pwr_if.o(i.USBPD_PWR_IF_CheckUpdateSNKPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USBPD_PWR_IF_CheckUpdateSNKPower &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PWR_IF_Init
</UL>

<P><STRONG><a name="[171]"></a>USBPD_PWR_IF_Disable_VConn</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, usbpd_pwr_if.o(i.USBPD_PWR_IF_Disable_VConn))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = USBPD_PWR_IF_Disable_VConn &rArr; USBPD_TRACE_Add &rArr; USBPD_DPM_TraceWakeUp &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TRACE_Add
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPM_set_vconn
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_PE_VconnPwr
</UL>

<P><STRONG><a name="[170]"></a>USBPD_PWR_IF_Enable_VConn</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, usbpd_pwr_if.o(i.USBPD_PWR_IF_Enable_VConn))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = USBPD_PWR_IF_Enable_VConn &rArr; USBPD_TRACE_Add &rArr; USBPD_DPM_TraceWakeUp &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TRACE_Add
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPM_set_vconn
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_PE_VconnPwr
</UL>

<P><STRONG><a name="[94]"></a>USBPD_PWR_IF_GetPortPDOs</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, usbpd_pwr_if.o(i.USBPD_PWR_IF_GetPortPDOs))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBPD_PWR_IF_GetPortPDOs
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_SNK_EvaluateCapabilities
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_GetDataInfo
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_SNK_EvaluateMatchWithSRCPDO
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DPM_SNK_BuildRDOfromSelectedPDO
</UL>

<P><STRONG><a name="[183]"></a>USBPD_PWR_IF_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, usbpd_pwr_if.o(i.USBPD_PWR_IF_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USBPD_PWR_IF_Init &rArr; USBPD_PWR_IF_CheckUpdateSNKPower &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PWR_CheckPDOContent
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PWR_IF_CheckUpdateSNKPower
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_UserInit
</UL>

<P><STRONG><a name="[161]"></a>USBPD_PWR_IF_SearchRequestedPDO</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, usbpd_pwr_if.o(i.USBPD_PWR_IF_SearchRequestedPDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBPD_PWR_IF_SearchRequestedPDO
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_EvaluateRequest
</UL>

<P><STRONG><a name="[17d]"></a>USBPD_PWR_IF_SetProfile</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, usbpd_pwr_if.o(i.USBPD_PWR_IF_SetProfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBPD_PWR_IF_SetProfile &rArr; USBPD_PWR_IF_VBUSIsEnabled &rArr; HW_IF_PWR_VBUSIsEnabled &rArr; USBPD_TCPM_VBUS_IsVsafe5V
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IF_PWR_SetVoltage
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IF_PWR_GetVoltage
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PWR_IF_VBUSIsEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_SetupNewPower
</UL>

<P><STRONG><a name="[16e]"></a>USBPD_PWR_IF_SupplyReady</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbpd_pwr_if.o(i.USBPD_PWR_IF_SupplyReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBPD_PWR_IF_SupplyReady &rArr; USBPD_TCPM_VBUS_IsVsafe5V
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPM_VBUS_IsVsafe5V
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPM_VBUS_IsVsafe0V
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_IsPowerReady
</UL>

<P><STRONG><a name="[163]"></a>USBPD_PWR_IF_VBUSDisable</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, usbpd_pwr_if.o(i.USBPD_PWR_IF_VBUSDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = USBPD_PWR_IF_VBUSDisable &rArr; HW_IF_PWR_Enable &rArr; USBPD_TRACE_Add &rArr; USBPD_DPM_TraceWakeUp &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TRACE_Add
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IF_PWR_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_PowerRoleSwap
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_HardReset
</UL>

<P><STRONG><a name="[162]"></a>USBPD_PWR_IF_VBUSEnable</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, usbpd_pwr_if.o(i.USBPD_PWR_IF_VBUSEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = USBPD_PWR_IF_VBUSEnable &rArr; HW_IF_PWR_Enable &rArr; USBPD_TRACE_Add &rArr; USBPD_DPM_TraceWakeUp &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TRACE_Add
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IF_PWR_Enable
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_PowerRoleSwap
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_HardReset
</UL>

<P><STRONG><a name="[19c]"></a>USBPD_PWR_IF_VBUSIsEnabled</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbpd_pwr_if.o(i.USBPD_PWR_IF_VBUSIsEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBPD_PWR_IF_VBUSIsEnabled &rArr; HW_IF_PWR_VBUSIsEnabled &rArr; USBPD_TCPM_VBUS_IsVsafe5V
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IF_PWR_VBUSIsEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PWR_IF_SetProfile
</UL>

<P><STRONG><a name="[1a0]"></a>USBPD_TCPCI_Delay</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usbpd_tcpci.o(i.USBPD_TCPCI_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBPD_TCPCI_Delay &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusb305_tcpc_set_vbus_level
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusb305_tcpc_get_cc
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpc_set_power
</UL>

<P><STRONG><a name="[169]"></a>USBPD_TCPCI_GetDevicesDrivers</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbpd_tcpci.o(i.USBPD_TCPCI_GetDevicesDrivers))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_InitCore
</UL>

<P><STRONG><a name="[168]"></a>USBPD_TCPCI_Init</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, usbpd_tcpci.o(i.USBPD_TCPCI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USBPD_TCPCI_Init &rArr; osSemaphoreCreate &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigAnalogFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_InitCore
</UL>

<P><STRONG><a name="[1a4]"></a>USBPD_TCPCI_ReadRegister</STRONG> (Thumb, 64 bytes, Stack size 48 bytes, usbpd_tcpci.o(i.USBPD_TCPCI_ReadRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = USBPD_TCPCI_ReadRegister &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusb305_tcpc_set_vconn
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusb305_tcpc_set_vbus_level
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusb305_tcpc_init
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusb305_tcpc_get_vbus_level
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusb305_tcpc_get_power_status
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusb305_tcpc_get_fault_status
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusb305_tcpc_get_cc
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusb305_tcpc_alert
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpc_set_power
</UL>

<P><STRONG><a name="[1a6]"></a>USBPD_TCPCI_ReceiveBuffer</STRONG> (Thumb, 132 bytes, Stack size 56 bytes, usbpd_tcpci.o(i.USBPD_TCPCI_ReceiveBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = USBPD_TCPCI_ReceiveBuffer &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusb305_tcpc_get_message
</UL>

<P><STRONG><a name="[1a7]"></a>USBPD_TCPCI_SendTransmitBuffer</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, usbpd_tcpci.o(i.USBPD_TCPCI_SendTransmitBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = USBPD_TCPCI_SendTransmitBuffer &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusb305_tcpc_transmit
</UL>

<P><STRONG><a name="[1a8]"></a>USBPD_TCPCI_WriteRegister</STRONG> (Thumb, 64 bytes, Stack size 48 bytes, usbpd_tcpci.o(i.USBPD_TCPCI_WriteRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = USBPD_TCPCI_WriteRegister &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusb305_tcpc_transmit
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusb305_tcpc_set_vconn
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusb305_tcpc_set_vbus_level
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusb305_tcpc_set_sop_supported
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusb305_tcpc_set_rx_state
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusb305_tcpc_set_polarity
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusb305_tcpc_set_msg_header
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusb305_tcpc_set_fault_status
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusb305_tcpc_set_bist_test_data
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusb305_tcpc_init
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusb305_tcpc_clear_alert
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusb305_tcpc_alert
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusb305_tcpc_SinkTxOK
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusb305_tcpc_SinkTxNG
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusb305_tcpc_EnableRx
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusb305_tcpc_DisableRx
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpc_set_power
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpc_set_pin_role
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpc_set_alert_mask
</UL>

<P><STRONG><a name="[16d]"></a>USBPD_TCPI_AlertInit</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, usbpd_tcpci.o(i.USBPD_TCPI_AlertInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBPD_TCPI_AlertInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_InitOS
</UL>

<P><STRONG><a name="[16a]"></a>USBPD_TCPM_HWInit</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, usbpd_tcpm.o(i.USBPD_TCPM_HWInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USBPD_TCPM_HWInit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_InitCore
</UL>

<P><STRONG><a name="[121]"></a>USBPD_TCPM_Send_BIST_Pattern</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbpd_tcpm.o(i.USBPD_TCPM_Send_BIST_Pattern))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBPD_TCPM_Send_BIST_Pattern
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPM_Disconnect
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRL_Received
</UL>

<P><STRONG><a name="[cf]"></a>USBPD_TCPM_VBUS_Disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbpd_tcpm.o(i.USBPD_TCPM_VBUS_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IF_PWR_Enable
</UL>

<P><STRONG><a name="[ce]"></a>USBPD_TCPM_VBUS_Enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbpd_tcpm.o(i.USBPD_TCPM_VBUS_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IF_PWR_Enable
</UL>

<P><STRONG><a name="[d0]"></a>USBPD_TCPM_VBUS_GetVoltage</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usbpd_tcpm.o(i.USBPD_TCPM_VBUS_GetVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBPD_TCPM_VBUS_GetVoltage
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IF_PWR_GetVoltage
</UL>

<P><STRONG><a name="[19e]"></a>USBPD_TCPM_VBUS_IsVsafe0V</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, usbpd_tcpm.o(i.USBPD_TCPM_VBUS_IsVsafe0V))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBPD_TCPM_VBUS_IsVsafe0V
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PWR_IF_SupplyReady
</UL>

<P><STRONG><a name="[d2]"></a>USBPD_TCPM_VBUS_IsVsafe5V</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, usbpd_tcpm.o(i.USBPD_TCPM_VBUS_IsVsafe5V))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBPD_TCPM_VBUS_IsVsafe5V
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_Task
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IF_PWR_VBUSIsEnabled
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PWR_IF_SupplyReady
</UL>

<P><STRONG><a name="[15e]"></a>USBPD_TCPM_alert</STRONG> (Thumb, 694 bytes, Stack size 56 bytes, usbpd_tcpm.o(i.USBPD_TCPM_alert))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USBPD_TCPM_alert &rArr; TCPM_CheckConnection &rArr; TCPM_Disconnect &rArr; USBPD_TCPM_Send_BIST_Pattern
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPM_set_rx_state
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPM_get_message
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPM_Disconnect
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPM_CheckConnection
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_ALERT_Task
</UL>

<P><STRONG><a name="[14b]"></a>USBPD_TCPM_get_cc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbpd_tcpm.o(i.USBPD_TCPM_get_cc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBPD_TCPM_get_cc
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPM_CheckConnection
</UL>

<P><STRONG><a name="[1a9]"></a>USBPD_TCPM_get_message</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbpd_tcpm.o(i.USBPD_TCPM_get_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBPD_TCPM_get_message
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPM_alert
</UL>

<P><STRONG><a name="[87]"></a>USBPD_TCPM_set_cc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbpd_tcpm.o(i.USBPD_TCPM_set_cc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBPD_TCPM_set_cc
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_PowerRoleSwap
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DPM_AssertRp
</UL>

<P><STRONG><a name="[199]"></a>USBPD_TCPM_set_msg_header</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbpd_tcpm.o(i.USBPD_TCPM_set_msg_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBPD_TCPM_set_msg_header
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_SetHeaderSpecification
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_SetHeaderPowerRole
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_SetHeaderDataRole
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_SetHeader
</UL>

<P><STRONG><a name="[14e]"></a>USBPD_TCPM_set_polarity</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbpd_tcpm.o(i.USBPD_TCPM_set_polarity))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPM_CheckConnection
</UL>

<P><STRONG><a name="[14c]"></a>USBPD_TCPM_set_rx_state</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usbpd_tcpm.o(i.USBPD_TCPM_set_rx_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBPD_TCPM_set_rx_state
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPM_alert
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPM_CheckConnection
</UL>

<P><STRONG><a name="[cd]"></a>USBPD_TCPM_set_vconn</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbpd_tcpm.o(i.USBPD_TCPM_set_vconn))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_UserCableDetection
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IF_PWR_Enable
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PWR_IF_Enable_VConn
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PWR_IF_Disable_VConn
</UL>

<P><STRONG><a name="[124]"></a>USBPD_TCPM_transmit</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, usbpd_tcpm.o(i.USBPD_TCPM_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBPD_TCPM_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDPD_PRL_BistCarrierEyeModeExit
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRL_StateTXConstructMessage
</UL>

<P><STRONG><a name="[46]"></a>USBPD_TRACE_Add</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, usbpd_trace.o(i.USBPD_TRACE_Add))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = USBPD_TRACE_Add &rArr; USBPD_DPM_TraceWakeUp &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_TraceWakeUp
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACER_EMB_WriteData
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACER_EMB_UnLock
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACER_EMB_Lock
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACER_EMB_AllocateBufer
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_SNK_EvaluateCapabilities
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_CADCallback
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_ALERT_Task
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IF_PWR_Enable
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusb305_tcpc_set_rx_state
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusb305_tcpc_get_vbus_level
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusb305_tcpc_get_power_status
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusb305_tcpc_get_cc
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusb305_tcpc_alert
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusb305_tcpc_DisableRx
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpc_set_pin_role
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_MessageReq
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PWR_IF_VBUSEnable
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PWR_IF_VBUSDisable
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PWR_IF_Enable_VConn
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PWR_IF_Disable_VConn
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DPM_SNK_BuildRDOfromSelectedPDO
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbpd_trace.o(i.USBPD_TRACE_Init)
</UL>
<P><STRONG><a name="[167]"></a>USBPD_TRACE_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbpd_trace.o(i.USBPD_TRACE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = USBPD_TRACE_Init &rArr; TRACER_EMB_Init &rArr; HW_TRACER_EMB_Init &rArr; LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_SetTrace
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACER_EMB_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_InitCore
</UL>

<P><STRONG><a name="[1ac]"></a>USBPD_TRACE_TX_Process</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usbpd_trace.o(i.USBPD_TRACE_TX_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBPD_TRACE_TX_Process &rArr; TRACER_EMB_TX_Process &rArr; HW_TRACER_EMB_SendData &rArr; LL_APB1_GRP1_EnableClock
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACER_EMB_TX_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TRACE_TX_Task
</UL>

<P><STRONG><a name="[51]"></a>USBPD_TRACE_TX_Task</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usbpd_dpm_core.o(i.USBPD_TRACE_TX_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USBPD_TRACE_TX_Task &rArr; osMessageGet &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TRACE_TX_Process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbpd_dpm_core.o(.constdata)
</UL>
<P><STRONG><a name="[184]"></a>USBPD_VDM_UserInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbpd_vdm_user.o(i.USBPD_VDM_UserInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBPD_VDM_UserInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_InitVDM_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_UserInit
</UL>

<P><STRONG><a name="[19b]"></a>_PWR_CheckPDOContent</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, usbpd_pwr_if.o(i._PWR_CheckPDOContent))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _PWR_CheckPDOContent
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PWR_IF_Init
</UL>

<P><STRONG><a name="[1af]"></a>__0sprintf$8</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1f6]"></a>__1sprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)

<P><STRONG><a name="[19f]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusb305_tcpc_set_rx_state
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusb305_tcpc_get_vbus_level
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusb305_tcpc_get_power_status
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusb305_tcpc_get_cc
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusb305_tcpc_alert
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PWR_IF_VBUSEnable
</UL>

<P><STRONG><a name="[9d]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cmsis_os.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPM_CheckConnection
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_StateMachine_SRC
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_StateMachine_VDM
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_Check_AMSConflict
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_SubStateMachine_VconnSwap
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_SubStateMachine_ExtendedMessages
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_SVDM_CheckIdentity
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_Check_ExtendedMessage
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_Check_ControlMessage
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_PRL_PostReceiveEvent
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_SendMessage
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetMessage
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DpmConfigSetCnf
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DpmConfigGetCnf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_MessageReq
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_VDM_InformIdentity
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_SendExtendedMessage
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_Request_CtrlMessage
</UL>

<P><STRONG><a name="[1f7]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1f8]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1f9]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[16]"></a>fusb305_tcpc_DisableRx</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, fusb305.o(i.fusb305_tcpc_DisableRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = fusb305_tcpc_DisableRx &rArr; USBPD_TRACE_Add &rArr; USBPD_DPM_TraceWakeUp &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TRACE_Add
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPCI_WriteRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fusb305.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>fusb305_tcpc_EnableRx</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fusb305.o(i.fusb305_tcpc_EnableRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = fusb305_tcpc_EnableRx &rArr; USBPD_TCPCI_WriteRegister &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPCI_WriteRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fusb305.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>fusb305_tcpc_IfSinkTxOk</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fusb305.o(i.fusb305_tcpc_IfSinkTxOk))
<BR>[Address Reference Count : 1]<UL><LI> fusb305.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>fusb305_tcpc_SinkTxNG</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fusb305.o(i.fusb305_tcpc_SinkTxNG))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = fusb305_tcpc_SinkTxNG &rArr; USBPD_TCPCI_WriteRegister &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPCI_WriteRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fusb305.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>fusb305_tcpc_SinkTxOK</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, fusb305.o(i.fusb305_tcpc_SinkTxOK))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = fusb305_tcpc_SinkTxOK &rArr; USBPD_TCPCI_WriteRegister &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPCI_WriteRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fusb305.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>fusb305_tcpc_alert</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, fusb305.o(i.fusb305_tcpc_alert))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = fusb305_tcpc_alert &rArr; USBPD_TRACE_Add &rArr; USBPD_DPM_TraceWakeUp &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TRACE_Add
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPCI_WriteRegister
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPCI_ReadRegister
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fusb305.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>fusb305_tcpc_clear_alert</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, fusb305.o(i.fusb305_tcpc_clear_alert))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = fusb305_tcpc_clear_alert &rArr; USBPD_TCPCI_WriteRegister &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPCI_WriteRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fusb305.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>fusb305_tcpc_get_cc</STRONG> (Thumb, 304 bytes, Stack size 40 bytes, fusb305.o(i.fusb305_tcpc_get_cc))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = fusb305_tcpc_get_cc &rArr; USBPD_TRACE_Add &rArr; USBPD_DPM_TraceWakeUp &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TRACE_Add
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPCI_ReadRegister
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPCI_Delay
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpc_set_power
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fusb305.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>fusb305_tcpc_get_fault_status</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, fusb305.o(i.fusb305_tcpc_get_fault_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = fusb305_tcpc_get_fault_status &rArr; USBPD_TCPCI_ReadRegister &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPCI_ReadRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fusb305.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>fusb305_tcpc_get_message</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fusb305.o(i.fusb305_tcpc_get_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = fusb305_tcpc_get_message &rArr; USBPD_TCPCI_ReceiveBuffer &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPCI_ReceiveBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fusb305.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>fusb305_tcpc_get_power_status</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, fusb305.o(i.fusb305_tcpc_get_power_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = fusb305_tcpc_get_power_status &rArr; USBPD_TRACE_Add &rArr; USBPD_DPM_TraceWakeUp &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TRACE_Add
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPCI_ReadRegister
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusb305_tcpc_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fusb305.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>fusb305_tcpc_get_vbus_level</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, fusb305.o(i.fusb305_tcpc_get_vbus_level))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = fusb305_tcpc_get_vbus_level &rArr; USBPD_TRACE_Add &rArr; USBPD_DPM_TraceWakeUp &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TRACE_Add
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPCI_ReadRegister
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusb305_tcpc_set_vbus_level
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpc_set_power
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fusb305.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>fusb305_tcpc_init</STRONG> (Thumb, 420 bytes, Stack size 48 bytes, fusb305.o(i.fusb305_tcpc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = fusb305_tcpc_init &rArr; fusb305_tcpc_set_cc &rArr; tcpc_set_pin_role &rArr; USBPD_TRACE_Add &rArr; USBPD_DPM_TraceWakeUp &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPCI_WriteRegister
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPCI_ReadRegister
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusb305_tcpc_set_cc
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusb305_tcpc_get_power_status
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpc_set_alert_mask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fusb305.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>fusb305_tcpc_set_bist_test_data</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fusb305.o(i.fusb305_tcpc_set_bist_test_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = fusb305_tcpc_set_bist_test_data &rArr; USBPD_TCPCI_WriteRegister &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPCI_WriteRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fusb305.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>fusb305_tcpc_set_cc</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, fusb305.o(i.fusb305_tcpc_set_cc))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = fusb305_tcpc_set_cc &rArr; tcpc_set_pin_role &rArr; USBPD_TRACE_Add &rArr; USBPD_DPM_TraceWakeUp &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusb305_tcpc_set_msg_header
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpc_set_pin_role
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpc_set_alert_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusb305_tcpc_set_rx_state
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusb305_tcpc_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fusb305.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>fusb305_tcpc_set_fault_status</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, fusb305.o(i.fusb305_tcpc_set_fault_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = fusb305_tcpc_set_fault_status &rArr; USBPD_TCPCI_WriteRegister &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPCI_WriteRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fusb305.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>fusb305_tcpc_set_msg_header</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fusb305.o(i.fusb305_tcpc_set_msg_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = fusb305_tcpc_set_msg_header &rArr; USBPD_TCPCI_WriteRegister &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPCI_WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusb305_tcpc_set_cc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fusb305.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>fusb305_tcpc_set_polarity</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fusb305.o(i.fusb305_tcpc_set_polarity))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = fusb305_tcpc_set_polarity &rArr; USBPD_TCPCI_WriteRegister &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPCI_WriteRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fusb305.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>fusb305_tcpc_set_rx_state</STRONG> (Thumb, 394 bytes, Stack size 64 bytes, fusb305.o(i.fusb305_tcpc_set_rx_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = fusb305_tcpc_set_rx_state &rArr; tcpc_set_power &rArr; fusb305_tcpc_get_vbus_level &rArr; USBPD_TRACE_Add &rArr; USBPD_DPM_TraceWakeUp &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TRACE_Add
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPCI_WriteRegister
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusb305_tcpc_set_cc
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpc_set_power
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpc_set_alert_mask
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fusb305.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>fusb305_tcpc_set_sop_supported</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, fusb305.o(i.fusb305_tcpc_set_sop_supported))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = fusb305_tcpc_set_sop_supported &rArr; USBPD_TCPCI_WriteRegister &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPCI_WriteRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fusb305.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>fusb305_tcpc_set_vbus_level</STRONG> (Thumb, 438 bytes, Stack size 32 bytes, fusb305.o(i.fusb305_tcpc_set_vbus_level))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = fusb305_tcpc_set_vbus_level &rArr; fusb305_tcpc_get_vbus_level &rArr; USBPD_TRACE_Add &rArr; USBPD_DPM_TraceWakeUp &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPCI_WriteRegister
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPCI_ReadRegister
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPCI_Delay
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusb305_tcpc_get_vbus_level
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fusb305.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>fusb305_tcpc_set_vconn</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, fusb305.o(i.fusb305_tcpc_set_vconn))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = fusb305_tcpc_set_vconn &rArr; USBPD_TCPCI_WriteRegister &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPCI_WriteRegister
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPCI_ReadRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fusb305.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>fusb305_tcpc_transmit</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, fusb305.o(i.fusb305_tcpc_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = fusb305_tcpc_transmit &rArr; USBPD_TCPCI_WriteRegister &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPCI_WriteRegister
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPCI_SendTransmitBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fusb305.o(.data)
</UL>
<P><STRONG><a name="[3e]"></a>main</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = main &rArr; GUI_Init &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_Run
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_InitOS
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_InitCore
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_UserInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[187]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPM_HWInit
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_Init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_Init
</UL>

<P><STRONG><a name="[185]"></a>osDelay</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cmsis_os.o(i.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_WaitForTime
</UL>

<P><STRONG><a name="[17c]"></a>osKernelStart</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmsis_os.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = osKernelStart &rArr; vTaskStartScheduler &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_Run
</UL>

<P><STRONG><a name="[a1]"></a>osMessageCreate</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cmsis_os.o(i.osMessageCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = osMessageCreate &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_InitOS
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_UserInit
</UL>

<P><STRONG><a name="[15c]"></a>osMessageGet</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, cmsis_os.o(i.osMessageGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osMessageGet &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TRACE_TX_Task
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_Task
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_ALERT_Task
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskGUI
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_UserExecute
</UL>

<P><STRONG><a name="[8b]"></a>osMessagePut</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, cmsis_os.o(i.osMessagePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_PowerRoleSwap
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_Notification
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_Task
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_TaskWakeUp
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_TraceWakeUp
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PostNotificationMessage
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskGUI
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CALLBACK_RX
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DPM_ManageAlert
</UL>

<P><STRONG><a name="[1a2]"></a>osSemaphoreCreate</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, cmsis_os.o(i.osSemaphoreCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = osSemaphoreCreate &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPCI_Init
</UL>

<P><STRONG><a name="[1a5]"></a>osSemaphoreRelease</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, cmsis_os.o(i.osSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPCI_WriteRegister
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPCI_SendTransmitBuffer
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPCI_ReceiveBuffer
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPCI_ReadRegister
</UL>

<P><STRONG><a name="[1a3]"></a>osSemaphoreWait</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, cmsis_os.o(i.osSemaphoreWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPCI_WriteRegister
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPCI_SendTransmitBuffer
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPCI_ReceiveBuffer
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPCI_ReadRegister
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPCI_Init
</UL>

<P><STRONG><a name="[181]"></a>osSystickHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, cmsis_os.o(i.osSystickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osSystickHandler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_TimerCounter
</UL>

<P><STRONG><a name="[92]"></a>osThreadCreate</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, cmsis_os.o(i.osThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_InitOS
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DPM_ManageAttachedState
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_UserInit
</UL>

<P><STRONG><a name="[160]"></a>osThreadTerminate</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmsis_os.o(i.osThreadTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_CADCallback
</UL>

<P><STRONG><a name="[1d7]"></a>pvPortMalloc</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[1d2]"></a>pxPortInitialiseStack</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[1c4]"></a>uxListRemove</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>

<P><STRONG><a name="[b9]"></a>uxQueueMessagesWaitingFromISR</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, queue.o(i.uxQueueMessagesWaitingFromISR))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[b8]"></a>uxTaskGetNumberOfTasks</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.uxTaskGetNumberOfTasks))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_TimerCounter
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[1c9]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[1d1]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[1c6]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[1c5]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>

<P><STRONG><a name="[1c8]"></a>vPortEnterCritical</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
</UL>

<P><STRONG><a name="[1ca]"></a>vPortExitCritical</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
</UL>

<P><STRONG><a name="[1cf]"></a>vPortFree</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>

<P><STRONG><a name="[1cb]"></a>vPortYield</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, port.o(i.vPortYield))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[1b6]"></a>vTaskDelay</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[1c2]"></a>vTaskDelete</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
</UL>

<P><STRONG><a name="[1e3]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
</UL>

<P><STRONG><a name="[1d6]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[1dc]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1b7]"></a>vTaskStartScheduler</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = vTaskStartScheduler &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[1ae]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PWR_CheckPDOContent
</UL>

<P><STRONG><a name="[71]"></a>vTaskSwitchContext</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTaskSwitchContext
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[1dd]"></a>xPortStartScheduler</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = xPortStartScheduler &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvPortStartFirstTask
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[1c0]"></a>xPortSysTickHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, port.o(i.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMaskFromISR
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMaskFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
</UL>

<P><STRONG><a name="[1b8]"></a>xQueueGenericCreate</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
</UL>

<P><STRONG><a name="[1e2]"></a>xQueueGenericReset</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[1bd]"></a>xQueueGenericSend</STRONG> (Thumb, 262 bytes, Stack size 48 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
</UL>

<P><STRONG><a name="[1bc]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMaskFromISR
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMaskFromISR
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
</UL>

<P><STRONG><a name="[1be]"></a>xQueueGiveFromISR</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, queue.o(i.xQueueGiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMaskFromISR
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMaskFromISR
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>

<P><STRONG><a name="[1bb]"></a>xQueueReceive</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, queue.o(i.xQueueReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
</UL>

<P><STRONG><a name="[1ba]"></a>xQueueReceiveFromISR</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, queue.o(i.xQueueReceiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xQueueReceiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMaskFromISR
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMaskFromISR
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
</UL>

<P><STRONG><a name="[1bf]"></a>xQueueSemaphoreTake</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, queue.o(i.xQueueSemaphoreTake))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
</UL>

<P><STRONG><a name="[1e4]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1c1]"></a>xTaskCreate</STRONG> (Thumb, 78 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[1e0]"></a>xTaskIncrementTick</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[1d5]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[1da]"></a>xTaskResumeAll</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1d8]"></a>prvHeapInit</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[1d9]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[4c]"></a>prvTaskExitError</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[8e]"></a>DPM_ManageAttachedState</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, usbpd_dpm_core.o(i.DPM_ManageAttachedState))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = DPM_ManageAttachedState &rArr; USBPD_DPM_UserCableDetection &rArr; USBPD_DPM_PE_VconnPwr &rArr; USBPD_PWR_IF_Enable_VConn &rArr; USBPD_TRACE_Add &rArr; USBPD_DPM_TraceWakeUp &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_IsCableConnected
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_WaitForTime
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_UserCableDetection
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_CADCallback
</UL>

<P><STRONG><a name="[5c]"></a>USBPD_PE_TaskWakeUp</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbpd_dpm_core.o(i.USBPD_PE_TaskWakeUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USBPD_PE_TaskWakeUp &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbpd_dpm_core.o(.constdata)
</UL>
<P><STRONG><a name="[1b9]"></a>inHandlerMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cmsis_os.o(i.inHandlerMode))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>

<P><STRONG><a name="[e3]"></a>I2C_Flush_TXDR</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f0xx_hal_i2c.o(i.I2C_Flush_TXDR))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>

<P><STRONG><a name="[e2]"></a>I2C_IsAcknowledgeFailed</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, stm32f0xx_hal_i2c.o(i.I2C_IsAcknowledgeFailed))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
</UL>

<P><STRONG><a name="[be]"></a>I2C_RequestMemoryRead</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, stm32f0xx_hal_i2c.o(i.I2C_RequestMemoryRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[c2]"></a>I2C_RequestMemoryWrite</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, stm32f0xx_hal_i2c.o(i.I2C_RequestMemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[bf]"></a>I2C_TransferConfig</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, stm32f0xx_hal_i2c.o(i.I2C_TransferConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[bd]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, stm32f0xx_hal_i2c.o(i.I2C_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[c0]"></a>I2C_WaitOnSTOPFlagUntilTimeout</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32f0xx_hal_i2c.o(i.I2C_WaitOnSTOPFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[c3]"></a>I2C_WaitOnTXISFlagUntilTimeout</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f0xx_hal_i2c.o(i.I2C_WaitOnTXISFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[cb]"></a>__NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f0xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[ea]"></a>LL_RCC_GetUSARTClockSource</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_ll_rcc.o(i.LL_RCC_GetUSARTClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
</UL>

<P><STRONG><a name="[eb]"></a>LL_RCC_HSI_IsReady</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_ll_rcc.o(i.LL_RCC_HSI_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
</UL>

<P><STRONG><a name="[b6]"></a>FLASH_Program_HalfWord</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f0xx_hal_flash.o(i.FLASH_Program_HalfWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_Program_HalfWord
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[99]"></a>FLASH_SetErrorCode</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f0xx_hal_flash.o(i.FLASH_SetErrorCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_SetErrorCode
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[b4]"></a>FLASH_MassErase</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f0xx_hal_flash_ex.o(i.FLASH_MassErase))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[1cc]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[1cd]"></a>prvCopyDataToQueue</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvCopyDataToQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1d3]"></a>prvIsQueueEmpty</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[1d4]"></a>prvUnlockQueue</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1c3]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[1c7]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvAddNewTaskToReadyList
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[1ce]"></a>prvDeleteTCB</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[4d]"></a>prvIdleTask</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvIdleTask &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[1d0]"></a>prvInitialiseNewTask</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[1db]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>

<P><STRONG><a name="[1b3]"></a>tcpc_set_alert_mask</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, fusb305.o(i.tcpc_set_alert_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = tcpc_set_alert_mask &rArr; USBPD_TCPCI_WriteRegister &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPCI_WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusb305_tcpc_set_rx_state
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusb305_tcpc_set_cc
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusb305_tcpc_init
</UL>

<P><STRONG><a name="[1b4]"></a>tcpc_set_pin_role</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, fusb305.o(i.tcpc_set_pin_role))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = tcpc_set_pin_role &rArr; USBPD_TRACE_Add &rArr; USBPD_DPM_TraceWakeUp &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TRACE_Add
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPCI_WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusb305_tcpc_set_cc
</UL>

<P><STRONG><a name="[1b5]"></a>tcpc_set_power</STRONG> (Thumb, 550 bytes, Stack size 48 bytes, fusb305.o(i.tcpc_set_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = tcpc_set_power &rArr; fusb305_tcpc_get_vbus_level &rArr; USBPD_TRACE_Add &rArr; USBPD_DPM_TraceWakeUp &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPCI_WriteRegister
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPCI_ReadRegister
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPCI_Delay
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusb305_tcpc_get_vbus_level
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusb305_tcpc_get_cc
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusb305_tcpc_set_rx_state
</UL>

<P><STRONG><a name="[86]"></a>DPM_AssertRp</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbpd_dpm_user.o(i.DPM_AssertRp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DPM_AssertRp &rArr; USBPD_TCPM_set_cc
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPM_set_cc
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_PowerRoleSwap
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_HardReset
</UL>

<P><STRONG><a name="[88]"></a>DPM_FindVoltageIndex</STRONG> (Thumb, 158 bytes, Stack size 56 bytes, usbpd_dpm_user.o(i.DPM_FindVoltageIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = DPM_FindVoltageIndex &rArr; USBPD_DPM_SNK_EvaluateMatchWithSRCPDO &rArr; USBPD_PWR_IF_GetPortPDOs
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_SNK_EvaluateMatchWithSRCPDO
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_SNK_EvaluateCapabilities
</UL>

<P><STRONG><a name="[8a]"></a>DPM_ManageAlert</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, usbpd_dpm_user.o(i.DPM_ManageAlert))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = DPM_ManageAlert &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IF_PWR_GetCurrent
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_Request_HardReset
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_RequestAlert
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_UserExecute
</UL>

<P><STRONG><a name="[93]"></a>DPM_SNK_BuildRDOfromSelectedPDO</STRONG> (Thumb, 406 bytes, Stack size 104 bytes, usbpd_dpm_user.o(i.DPM_SNK_BuildRDOfromSelectedPDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = DPM_SNK_BuildRDOfromSelectedPDO &rArr; USBPD_TRACE_Add &rArr; USBPD_DPM_TraceWakeUp &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TRACE_Add
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PWR_IF_GetPortPDOs
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_SNK_EvaluateCapabilities
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_RequestMessageRequest
</UL>

<P><STRONG><a name="[62]"></a>USBPD_VDM_InformIdentity</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, usbpd_vdm_user.o(i.USBPD_VDM_InformIdentity))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = USBPD_VDM_InformIdentity &rArr; USBPD_DPM_PE_VconnPwr &rArr; USBPD_PWR_IF_Enable_VConn &rArr; USBPD_TRACE_Add &rArr; USBPD_DPM_TraceWakeUp &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_PE_VconnPwr
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbpd_vdm_user.o(.constdata)
</UL>
<P><STRONG><a name="[64]"></a>USBPD_VDM_InformMode</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbpd_vdm_user.o(i.USBPD_VDM_InformMode))
<BR>[Address Reference Count : 1]<UL><LI> usbpd_vdm_user.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>USBPD_VDM_InformModeEnter</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbpd_vdm_user.o(i.USBPD_VDM_InformModeEnter))
<BR>[Address Reference Count : 1]<UL><LI> usbpd_vdm_user.o(.constdata)
</UL>
<P><STRONG><a name="[66]"></a>USBPD_VDM_InformModeExit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbpd_vdm_user.o(i.USBPD_VDM_InformModeExit))
<BR>[Address Reference Count : 1]<UL><LI> usbpd_vdm_user.o(.constdata)
</UL>
<P><STRONG><a name="[63]"></a>USBPD_VDM_InformSVID</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbpd_vdm_user.o(i.USBPD_VDM_InformSVID))
<BR>[Address Reference Count : 1]<UL><LI> usbpd_vdm_user.o(.constdata)
</UL>
<P><STRONG><a name="[68]"></a>USBPD_VDM_InformSpecific</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbpd_vdm_user.o(i.USBPD_VDM_InformSpecific))
<BR>[Address Reference Count : 1]<UL><LI> usbpd_vdm_user.o(.constdata)
</UL>
<P><STRONG><a name="[67]"></a>USBPD_VDM_SendSpecific</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbpd_vdm_user.o(i.USBPD_VDM_SendSpecific))
<BR>[Address Reference Count : 1]<UL><LI> usbpd_vdm_user.o(.constdata)
</UL>
<P><STRONG><a name="[d6]"></a>LL_AHB1_GRP1_EnableClock</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tracer_emb_hw.o(i.LL_AHB1_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_AHB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TRACER_EMB_Init
</UL>

<P><STRONG><a name="[db]"></a>LL_APB1_GRP1_EnableClock</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tracer_emb_hw.o(i.LL_APB1_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_APB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TRACER_EMB_SendData
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TRACER_EMB_RegisterRxCallback
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TRACER_EMB_Init
</UL>

<P><STRONG><a name="[d7]"></a>LL_GPIO_SetAFPin_0_7</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tracer_emb_hw.o(i.LL_GPIO_SetAFPin_0_7))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_GPIO_SetAFPin_0_7
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TRACER_EMB_Init
</UL>

<P><STRONG><a name="[d8]"></a>LL_GPIO_SetPinMode</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tracer_emb_hw.o(i.LL_GPIO_SetPinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_GPIO_SetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TRACER_EMB_Init
</UL>

<P><STRONG><a name="[da]"></a>LL_GPIO_SetPinPull</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tracer_emb_hw.o(i.LL_GPIO_SetPinPull))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_GPIO_SetPinPull
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TRACER_EMB_Init
</UL>

<P><STRONG><a name="[d9]"></a>LL_GPIO_SetPinSpeed</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tracer_emb_hw.o(i.LL_GPIO_SetPinSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_GPIO_SetPinSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TRACER_EMB_Init
</UL>

<P><STRONG><a name="[de]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tracer_emb_hw.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TRACER_EMB_StartRX
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TRACER_EMB_Init
</UL>

<P><STRONG><a name="[dd]"></a>__NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, tracer_emb_hw.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TRACER_EMB_StartRX
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TRACER_EMB_Init
</UL>

<P><STRONG><a name="[7c]"></a>LoadPDOFromFlash</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bsp_gui.o(i.LoadPDOFromFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LoadPDOFromFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GUI_LoadDataFromFlash
</UL>

<P><STRONG><a name="[7d]"></a>LoadSettingsFromFlash</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bsp_gui.o(i.LoadSettingsFromFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LoadSettingsFromFlash
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GUI_LoadDataFromFlash
</UL>

<P><STRONG><a name="[82]"></a>SavePDOInFlash</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, bsp_gui.o(i.SavePDOInFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SavePDOInFlash &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GUI_SaveDataInFlash
</UL>

<P><STRONG><a name="[83]"></a>SaveSettingsInFlash</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, bsp_gui.o(i.SaveSettingsInFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SaveSettingsInFlash &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GUI_SaveDataInFlash
</UL>

<P><STRONG><a name="[44]"></a>GUI_CALLBACK_RX</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gui_api.o(i.GUI_CALLBACK_RX))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = GUI_CALLBACK_RX &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_api.o(i.TaskGUI)
</UL>
<P><STRONG><a name="[aa]"></a>Request_MessageReq</STRONG> (Thumb, 1210 bytes, Stack size 96 bytes, gui_api.o(i.Request_MessageReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = Request_MessageReq &rArr; USBPD_DPM_RequestMessageRequest &rArr; DPM_SNK_BuildRDOfromSelectedPDO &rArr; USBPD_TRACE_Add &rArr; USBPD_DPM_TraceWakeUp &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TRACE_Add
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLV_init_encode
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLV_init_decode
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLV_get
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLV_deinit_encode
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLV_deinit_decode
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLV_addValue
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_RequestVconnSwap
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_RequestVDM_ExitMode
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_RequestVDM_EnterMode
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_RequestVDM_DiscoverySVID
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_RequestVDM_DiscoveryMode
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_RequestVDM_DiscoveryIdentify
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_RequestSourceCapability
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_RequestSoftReset
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_RequestSecurityRequest
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_RequestPowerRoleSwap
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_RequestPing
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_RequestMessageRequest
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_RequestHardReset
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_RequestGotoMin
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_RequestGetStatus
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_RequestGetSourceCapabilityExt
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_RequestGetSourceCapability
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_RequestGetSinkCapabilityExt
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_RequestGetSinkCapability
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_RequestGetPPS_Status
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_RequestGetManufacturerInfo
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_RequestGetCountryInfo
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_RequestGetCountryCodes
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_RequestGetBatteryStatus
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_RequestGetBatteryCapability
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_RequestFastRoleSwap
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_RequestDataRoleSwap
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_RequestCableReset
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_RequestAlert
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SendAnswer
</UL>

<P><STRONG><a name="[a8]"></a>Send_DpmConfigGetCnf</STRONG> (Thumb, 794 bytes, Stack size 72 bytes, gui_api.o(i.Send_DpmConfigGetCnf))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Send_DpmConfigGetCnf &rArr; Send_DpmConfigGetRej &rArr; TLV_add
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DpmConfigGetRej
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLV_init_encode
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLV_get_string_length
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLV_deinit_encode
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLV_add
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SendAnswer
</UL>

<P><STRONG><a name="[b2]"></a>Send_DpmConfigGetRej</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, gui_api.o(i.Send_DpmConfigGetRej))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Send_DpmConfigGetRej &rArr; TLV_add
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLV_init_encode
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLV_deinit_encode
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLV_add
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SendAnswer
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DpmConfigGetCnf
</UL>

<P><STRONG><a name="[a9]"></a>Send_DpmConfigSetCnf</STRONG> (Thumb, 848 bytes, Stack size 360 bytes, gui_api.o(i.Send_DpmConfigSetCnf))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = Send_DpmConfigSetCnf &rArr; UpdateSNKPowerPort0 &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateSNKPowerPort0
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLV_init_encode
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLV_init_decode
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLV_get
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLV_deinit_encode
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLV_addValue
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SendAnswer
</UL>

<P><STRONG><a name="[a6]"></a>Send_DpmInitCnf</STRONG> (Thumb, 494 bytes, Stack size 56 bytes, gui_api.o(i.Send_DpmInitCnf))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Send_DpmInitCnf &rArr; TLV_add
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLV_init_encode
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLV_deinit_encode
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLV_add
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SendAnswer
</UL>

<P><STRONG><a name="[ad]"></a>Send_DpmRegisterReadCnf</STRONG> (Thumb, 68 bytes, Stack size 64 bytes, gui_api.o(i.Send_DpmRegisterReadCnf))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Send_DpmRegisterReadCnf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLV_init_encode
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLV_deinit_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SendAnswer
</UL>

<P><STRONG><a name="[69]"></a>TaskGUI</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, gui_api.o(i.TaskGUI))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = TaskGUI &rArr; GUI_RXProcess &rArr; GUI_SendAnswer &rArr; Request_MessageReq &rArr; USBPD_DPM_RequestMessageRequest &rArr; DPM_SNK_BuildRDOfromSelectedPDO &rArr; USBPD_TRACE_Add &rArr; USBPD_DPM_TraceWakeUp &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RXProcess
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACER_EMB_StartRX
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_api.o(.constdata)
</UL>
<P><STRONG><a name="[143]"></a>UpdateSNKPowerPort0</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, gui_api.o(i.UpdateSNKPowerPort0))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = UpdateSNKPowerPort0 &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DpmConfigSetCnf
</UL>

<P><STRONG><a name="[6d]"></a>PRL_BistCompleted</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usbpd_prl.o(i.PRL_BistCompleted))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PRL_BistCompleted
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_PRL_BistCompleted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbpd_prl.o(.constdata)
</UL>
<P><STRONG><a name="[6a]"></a>PRL_Received</STRONG> (Thumb, 640 bytes, Stack size 40 bytes, usbpd_prl.o(i.PRL_Received))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = PRL_Received &rArr; PE_PRL_PostReceiveEvent &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPM_Send_BIST_Pattern
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_PRL_PostReceiveEventComplete
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_PRL_PostReceiveEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbpd_prl.o(.constdata)
</UL>
<P><STRONG><a name="[6c]"></a>PRL_ResetCompleted</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbpd_prl.o(i.PRL_ResetCompleted))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRL_TxCompleted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbpd_prl.o(.constdata)
</UL>
<P><STRONG><a name="[6b]"></a>PRL_ResetIndicate</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, usbpd_prl.o(i.PRL_ResetIndicate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = PRL_ResetIndicate &rArr; PE_PRL_HardResetReceived &rArr; USBPD_PRL_Reset &rArr; USBPD_PRL_EnableRX
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_PRL_HardResetReceived
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_DisableRX
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbpd_prl.o(.constdata)
</UL>
<P><STRONG><a name="[123]"></a>PRL_StateTXConstructMessage</STRONG> (Thumb, 354 bytes, Stack size 48 bytes, usbpd_prl.o(i.PRL_StateTXConstructMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = PRL_StateTXConstructMessage &rArr; USBPD_TCPM_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPM_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_SendMessage
</UL>

<P><STRONG><a name="[6e]"></a>PRL_TxCompleted</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, usbpd_prl.o(i.PRL_TxCompleted))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PRL_TxCompleted
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRL_ResetCompleted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbpd_prl.o(.constdata)
</UL>
<P><STRONG><a name="[ec]"></a>PE_ChangePowerRole</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usbpd_pe.o(i.PE_ChangePowerRole))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PE_ChangePowerRole &rArr; USBPD_PRL_SetHeaderPowerRole &rArr; USBPD_TCPM_set_msg_header
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_SetHeaderPowerRole
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_StateMachine_SRC
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_StateMachine_SNK
</UL>

<P><STRONG><a name="[106]"></a>PE_CheckSendMessageStatus</STRONG> (Thumb, 104 bytes, Stack size 20 bytes, usbpd_pe.o(i.PE_CheckSendMessageStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PE_CheckSendMessageStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_SubStateMachine_ExtendedMessages
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_Send_ExtendedMessage
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_Send_DataMessage
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_Send_CtrlMessage
</UL>

<P><STRONG><a name="[ef]"></a>PE_Check_ControlMessage</STRONG> (Thumb, 848 bytes, Stack size 32 bytes, usbpd_pe.o(i.PE_Check_ControlMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = PE_Check_ControlMessage &rArr; PE_Send_SRCCapabilities &rArr; USBPD_PRL_SendMessage &rArr; PRL_StateTXConstructMessage &rArr; USBPD_TCPM_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_Send_SRCCapabilities
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_EnableRX
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_StateMachine_SRC
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_StateMachine_SNK_ReadyWait
</UL>

<P><STRONG><a name="[f2]"></a>PE_Check_DataMessage</STRONG> (Thumb, 256 bytes, Stack size 48 bytes, usbpd_pe.o(i.PE_Check_DataMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = PE_Check_DataMessage &rArr; PE_ExtRevisionInteroperability &rArr; USBPD_PRL_SetHeaderSpecification &rArr; USBPD_TCPM_set_msg_header
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_Receive_BIST
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_ExtRevisionInteroperability
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_Check_DataMessageVDM
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_StateMachine_SRC
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_StateMachine_SNK_ReadyWait
</UL>

<P><STRONG><a name="[f5]"></a>PE_Check_DataMessageVDM</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, usbpd_pe.o(i.PE_Check_DataMessageVDM))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PE_Check_DataMessageVDM
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_Check_DataMessage
</UL>

<P><STRONG><a name="[f6]"></a>PE_Check_ExtendedMessage</STRONG> (Thumb, 618 bytes, Stack size 24 bytes, usbpd_pe.o(i.PE_Check_ExtendedMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PE_Check_ExtendedMessage &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_StateMachine_SRC
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_StateMachine_SNK
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_StateMachine_SNK_ReadyWait
</UL>

<P><STRONG><a name="[f3]"></a>PE_ExtRevisionInteroperability</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, usbpd_pe.o(i.PE_ExtRevisionInteroperability))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PE_ExtRevisionInteroperability &rArr; USBPD_PRL_SetHeaderSpecification &rArr; USBPD_TCPM_set_msg_header
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_SetHeaderSpecification
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_StateMachine_SRC
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_StateMachine_SNK
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_Check_DataMessage
</UL>

<P><STRONG><a name="[f8]"></a>PE_ExtRevisionInteroperability_Cable</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, usbpd_pe.o(i.PE_ExtRevisionInteroperability_Cable))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = PE_ExtRevisionInteroperability_Cable &rArr; USBPD_PRL_CBL_SetHeaderSpecification
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_CBL_SetHeaderSpecification
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_StateMachine_VDMCable
</UL>

<P><STRONG><a name="[114]"></a>PE_Get_RxEvent</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usbpd_pe.o(i.PE_Get_RxEvent))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_StateMachine_VDMCable
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_StateMachine_VDM
</UL>

<P><STRONG><a name="[fe]"></a>PE_PerformSoftReset</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, usbpd_pe.o(i.PE_PerformSoftReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PE_PerformSoftReset &rArr; USBPD_PRL_SetHeaderPowerRole &rArr; USBPD_TCPM_set_msg_header
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_SetHeaderPowerRole
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_StateMachine_SRC
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_StateMachine_SNK
</UL>

<P><STRONG><a name="[f4]"></a>PE_Receive_BIST</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, usbpd_pe.o(i.PE_Receive_BIST))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PE_Receive_BIST
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_Check_DataMessage
</UL>

<P><STRONG><a name="[103]"></a>PE_SVDM_CheckIdentity</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, usbpd_pe.o(i.PE_SVDM_CheckIdentity))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PE_SVDM_CheckIdentity &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_StateMachine_VDMCable
</UL>

<P><STRONG><a name="[115]"></a>PE_SVDM_CheckSVIDs</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, usbpd_pe.o(i.PE_SVDM_CheckSVIDs))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PE_SVDM_CheckSVIDs
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_StateMachine_VDM
</UL>

<P><STRONG><a name="[104]"></a>PE_Send_CtrlMessage</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, usbpd_pe.o(i.PE_Send_CtrlMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = PE_Send_CtrlMessage &rArr; USBPD_PRL_SendMessage &rArr; PRL_StateTXConstructMessage &rArr; USBPD_TCPM_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_CheckSendMessageStatus
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_StateMachine_SRC
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_StateMachine_SNK
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_SubStateMachine_VconnSwap
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_SubStateMachine_ReceiveDRS
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_SubStateMachine_Generic
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_StateMachine_SRC_NegocCapa
</UL>

<P><STRONG><a name="[107]"></a>PE_Send_DataMessage</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, usbpd_pe.o(i.PE_Send_DataMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = PE_Send_DataMessage &rArr; USBPD_PRL_SendMessage &rArr; PRL_StateTXConstructMessage &rArr; USBPD_TCPM_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_CheckSendMessageStatus
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_StateMachine_SRC
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_StateMachine_SNK
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_StateMachine_VDMCable
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_StateMachine_VDM
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_SubStateMachine_Generic
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_StateMachine_UVDM
</UL>

<P><STRONG><a name="[108]"></a>PE_Send_ExtendedMessage</STRONG> (Thumb, 82 bytes, Stack size 48 bytes, usbpd_pe.o(i.PE_Send_ExtendedMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = PE_Send_ExtendedMessage &rArr; USBPD_PRL_SendMessage &rArr; PRL_StateTXConstructMessage &rArr; USBPD_TCPM_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_CheckSendMessageStatus
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_StateMachine_SRC
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_SubStateMachine_Generic
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_SubStateMachine_ExtendedMessages
</UL>

<P><STRONG><a name="[f1]"></a>PE_Send_SRCCapabilities</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, usbpd_pe.o(i.PE_Send_SRCCapabilities))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = PE_Send_SRCCapabilities &rArr; USBPD_PRL_SendMessage &rArr; PRL_StateTXConstructMessage &rArr; USBPD_TCPM_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_StateMachine_SRC_SendCapa
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_Check_ControlMessage
</UL>

<P><STRONG><a name="[10e]"></a>PE_StateMachine_SNK_SelectCapa</STRONG> (Thumb, 376 bytes, Stack size 32 bytes, usbpd_pe.o(i.PE_StateMachine_SNK_SelectCapa))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PE_StateMachine_SNK_SelectCapa &rArr; USBPD_PRL_EnableRX
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_EnableRX
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_StateMachine_SNK
</UL>

<P><STRONG><a name="[10f]"></a>PE_StateMachine_SRC_NegocCapa</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, usbpd_pe.o(i.PE_StateMachine_SRC_NegocCapa))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = PE_StateMachine_SRC_NegocCapa &rArr; PE_Send_CtrlMessage &rArr; USBPD_PRL_SendMessage &rArr; PRL_StateTXConstructMessage &rArr; USBPD_TCPM_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_Send_CtrlMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_StateMachine_SRC
</UL>

<P><STRONG><a name="[110]"></a>PE_StateMachine_SRC_SendCapa</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, usbpd_pe.o(i.PE_StateMachine_SRC_SendCapa))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = PE_StateMachine_SRC_SendCapa &rArr; PE_Send_SRCCapabilities &rArr; USBPD_PRL_SendMessage &rArr; PRL_StateTXConstructMessage &rArr; USBPD_TCPM_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_Send_SRCCapabilities
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_SRCReleaseSinkNG
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_StateMachine_SRC
</UL>

<P><STRONG><a name="[112]"></a>PE_StateMachine_UVDM</STRONG> (Thumb, 126 bytes, Stack size 72 bytes, usbpd_pe.o(i.PE_StateMachine_UVDM))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = PE_StateMachine_UVDM &rArr; PE_Send_DataMessage &rArr; USBPD_PRL_SendMessage &rArr; PRL_StateTXConstructMessage &rArr; USBPD_TCPM_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_Send_DataMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_StateMachine_SRC
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_StateMachine_SNK
</UL>

<P><STRONG><a name="[117]"></a>PE_SubStateMachine_ExtendedMessages</STRONG> (Thumb, 456 bytes, Stack size 64 bytes, usbpd_pe.o(i.PE_SubStateMachine_ExtendedMessages))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = PE_SubStateMachine_ExtendedMessages &rArr; PE_Send_ExtendedMessage &rArr; USBPD_PRL_SendMessage &rArr; PRL_StateTXConstructMessage &rArr; USBPD_TCPM_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_Send_ExtendedMessage
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_CheckSendMessageStatus
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_SendMessage
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_PrepareExtendedTxChunkSending
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_PrepareChunkRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_StateMachine_SRC
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_StateMachine_SNK
</UL>

<P><STRONG><a name="[11a]"></a>PE_SubStateMachine_Generic</STRONG> (Thumb, 1758 bytes, Stack size 80 bytes, usbpd_pe.o(i.PE_SubStateMachine_Generic))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = PE_SubStateMachine_Generic &rArr; PE_SubStateMachine_ReceiveDRS &rArr; PE_Send_CtrlMessage &rArr; USBPD_PRL_SendMessage &rArr; PRL_StateTXConstructMessage &rArr; USBPD_TCPM_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_Send_RESET
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_SubStateMachine_ReceiveDRS
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_Send_ExtendedMessage
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_Send_DataMessage
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_Send_CtrlMessage
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_SetHeaderDataRole
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_EnableRX
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDPD_PRL_BistCarrierEyeModeExit
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDPD_PRL_BistCarrierEyeMode
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_StateMachine_SRC
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_StateMachine_SNK
</UL>

<P><STRONG><a name="[11d]"></a>PE_SubStateMachine_ReceiveDRS</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, usbpd_pe.o(i.PE_SubStateMachine_ReceiveDRS))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = PE_SubStateMachine_ReceiveDRS &rArr; PE_Send_CtrlMessage &rArr; USBPD_PRL_SendMessage &rArr; PRL_StateTXConstructMessage &rArr; USBPD_TCPM_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_Send_CtrlMessage
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_SetHeaderDataRole
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_SubStateMachine_Generic
</UL>

<P><STRONG><a name="[11f]"></a>PE_SubStateMachine_VconnSwap</STRONG> (Thumb, 924 bytes, Stack size 24 bytes, usbpd_pe.o(i.PE_SubStateMachine_VconnSwap))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = PE_SubStateMachine_VconnSwap &rArr; PE_Send_CtrlMessage &rArr; USBPD_PRL_SendMessage &rArr; PRL_StateTXConstructMessage &rArr; USBPD_TCPM_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_Send_CtrlMessage
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PRL_EnableRX
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_StateMachine_SRC
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PE_StateMachine_SNK
</UL>

<P><STRONG><a name="[14a]"></a>TCPM_CheckConnection</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, usbpd_tcpm.o(i.TCPM_CheckConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TCPM_CheckConnection &rArr; TCPM_Disconnect &rArr; USBPD_TCPM_Send_BIST_Pattern
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPM_set_rx_state
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPM_set_polarity
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPM_get_cc
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPM_Disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPM_alert
</UL>

<P><STRONG><a name="[14d]"></a>TCPM_Disconnect</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, usbpd_tcpm.o(i.TCPM_Disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TCPM_Disconnect &rArr; USBPD_TCPM_Send_BIST_Pattern
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPM_Send_BIST_Pattern
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_TCPM_alert
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPM_CheckConnection
</UL>

<P><STRONG><a name="[45]"></a>TCPM_PortIsDoingSwap</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbpd_tcpm.o(i.TCPM_PortIsDoingSwap))
<BR>[Address Reference Count : 1]<UL><LI> usbpd_tcpm.o(i.USBPD_TCPM_HWInit)
</UL>
<P><STRONG><a name="[1b0]"></a>_printf_core</STRONG> (Thumb, 1020 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>

<P><STRONG><a name="[1b2]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1b1]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[47]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf8.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0sprintf$8)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
